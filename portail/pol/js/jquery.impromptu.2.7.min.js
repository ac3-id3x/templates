/*
* jQuery Impromptu
* By: Trent Richardson [http://trentrichardson.com]
* Version 2.7
* Last Modified: 6/7/2009
*
* Copyright 2009 Trent Richardson
* Dual licensed under the MIT and GPL licenses.
* http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
* http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
*
*/
(function($){	
	var colorBtnBottom = null,
		colorBtnTop = null;

	$.prompt = function (message,options) {
		options = $.extend({},$.prompt.defaults,options);
		$.prompt.currentPrefix = options.prefix
		var ie6 = ($.browser.msie&&$.browser.version <= 7);
		var $body = $(document.body);
		var $window = $(window);
		
		if (options.color == undefined) {
			options.color = $("body").attr('class');
		}

		if (options.size == undefined) {
			options.size = "600";
		}

		var cbox = '<div class="' + options.prefix + 'box" id="' + options.prefix + 'box">';
		
		if (options.useiframe && (($('object, applet').length > 0) || ie6)) {
			cbox += '<iframe src="javascript:false;" style="display:block;position:absolute;z-index:-1;" class="' + options.prefix + 'fade" id="' + options.prefix + 'fade"></iframe>';
		} else {
			if (ie6) {
				$('select').css('visibility','hidden');
			}
			cbox += '<div class="' + options.prefix + 'fade" id="' + options.prefix + 'fade"></div>';
		}
        
               
		/* BEGIN | Si on souhaite appeler des onglets de layer */
		var count_ongl = 0,
			onglets = '<ul id="' + options.prefix + 'onglet">';
		$.each(options.onglet,function() {
			onglets += '<li><a href="' + options.onglet['ongl_' + count_ongl]['url'] + '" class="' + options.onglet['ongl_' + count_ongl]['attrClass'] + '">' + options.onglet['ongl_' + count_ongl]['libelle'] + '</a></li>';
			count_ongl++;
		});
		onglets += '</ul>';
		if (count_ongl == 0) {
			onglets = '';
			var classParent = '';
		} else {
			var classParent = ' add_ongl';
		}
		/* END */
		
		cbox += '<div class="' + options.prefix + '" id="' + options.prefix + '">';
		cbox += '<div class="' + options.prefix + 'container ' + options.color + classParent + '" style="width:' + options.size + 'px">';
		cbox += options.bgUnder;
		cbox += onglets;
		cbox += '<div class="' + options.prefix + 'close" title="Fermer">Fermer</div><div id="' + options.prefix + 'states"></div>';
		cbox += '</div></div></div>';

		var $jqib = $(cbox).appendTo($body);
		var $jqi = $jqib.children('#' + options.prefix);
		var $jqif = $jqib.children('#' + options.prefix + 'fade');
		if (message.constructor == String) {
			message = {
				state0:{
					html:message,
					buttons:options.buttons,
					focus:options.focus,
					submit:options.submit
				}
			};
		}
		
		var states = "",
			rtime,
			timeout = false,
			delta = 200,
			promptSize = 0,
            contentLoad = null;
            
        /* BEGIN | Chargement Ã©ventuel du contenu */
        if (options.loadURL != null) {
            contentLoad = $j("<div></div>").wrapInner('<div class="content_module" />');
			
            contentLoad.find('.content_module').fadeTo(0, 0).css({
                 'position': 'absolute',
                 'display': 'block'
             }).load(
                options.loadURL, 
                function() {
                    $jqi.find('.contentmsg').append(contentLoad.html());
                    
                    if (options.workBeforeShow != null) {
                        if (options.workBeforeShow()) {
                            showLoadContent();
                            setTimeout(options.loaded, 500);
                        }
                    } else {
                        showLoadContent();
                        setTimeout(options.loaded, 500);
                    }
                }
            ); 
        }
        /* END */
			
		
		$.each(message,function (statename,stateobj) {
			var reg = new RegExp("(<h3>)", "g");
			if (stateobj.html.match(reg) == null && options.loadURL == null) {
				stateobj.html = '<h3>&nbsp;</h3>' + stateobj.html;
			}
			
		
			stateobj = $.extend({},$.prompt.defaults.state,stateobj);
			message[statename] = stateobj;
			states +=   '<div id="' + options.prefix + '_state_' + statename + '" class="' + options.prefix + '_state" style="display:none;">' + 
                        '<div class="' + options.prefix + 'message">' + stateobj.html + '</div>' + 
                        '<div class="' + options.prefix + 'buttons">';

			$.each(stateobj.buttons,function (k,v) {
				var styleBtn = '';
				if (v == true && options.gradient['top'] != '#' && options.gradient['bottom'] != '#') {
					colorBtnBottom = options.gradient['bottom'];
					colorBtnTop = options.gradient['top'];
					styleBtn = ' style="background:' + colorBtnTop + ';background-image:-moz-linear-gradient(top, ' + colorBtnTop + ', ' + colorBtnBottom + ');background-image:-o-linear-gradient(top, ' + colorBtnTop + ', ' + colorBtnBottom + ');background-image:-webkit-gradient(linear, center top, center bottom, from(' + colorBtnTop + '), to(' + colorBtnBottom + '));background-image:linear-gradient(top, ' + colorBtnTop + ', ' + colorBtnBottom + ');"';
					
					var classAddict = '" class="' + options.color;
				} else {
					styleBtn = '';
					var classAddict = '';
				}
				states += '<button name="' + options.prefix + '_' + statename + '_button' + k + '" id="' + options.prefix + '_' + statename + '_button' + k + classAddict + '" value="' + v + '"' + styleBtn + '>' + k + '</button>';
				
			});
			states += '</div></div>';
		});
		
		$jqi.find('#' + options.prefix + 'states').html(states).children('.' + options.prefix + '_state:first').css('display','block');
		$jqi.find('.' + options.prefix + 'buttons:empty').css('display','none');
		
		$.each(message,function (statename,stateobj) {
			var $state = $jqi.find('#' + options.prefix + '_state_' + statename);
			$state.children('.' + options.prefix + 'buttons').children('button').click(function () {
				var msg = $state.children('.' + options.prefix + 'message');
				var clicked = stateobj.buttons[$(this).text()];
				var forminputs = {};
				$.each($jqi.find('#' + options.prefix + 'states :input').serializeArray(),function (i,obj) {
					if (forminputs[obj.name] === undefined) {
						forminputs[obj.name] = obj.value;
					} else if (typeof forminputs[obj.name] == Array) {
						forminputs[obj.name].push(obj.value);
					} else {
						forminputs[obj.name] = [forminputs[obj.name],obj.value];
					}
				});
				var close = stateobj.submit(clicked,msg,forminputs);


				if (close === undefined || close) {
					removePrompt(true,clicked,msg,forminputs);
				}
			});

			var statesbutton = $state.find('.' + options.prefix + 'buttons button:eq(' + stateobj.focus + ')');
			if (statesbutton.html() != "Annuler") {
				statesbutton.addClass(options.prefix + 'defaultbutton');
			}
		});

		var ie6scroll = function() {
			$jqib.css({top:$window.scrollTop()});
		};
		
		var fadeClicked = function() {
			if (options.persistent) {
				var i=0;$jqib.addClass(options.prefix+'warning');
                var intervalid=setInterval(function(){
                    $jqib.toggleClass(options.prefix+'warning');
                    if(i++>1){
                        clearInterval(intervalid);
                        $jqib.removeClass(options.prefix+'warning');
                    }
                },100);
			} else {
				removePrompt();
			}
		};
		
		var keyPressEventHandler = function (e) {
			var key = (window.event)?event.keyCode:e.keyCode;
			if (key==27) {
				removePrompt();
			}
			if (key==9) {
				var $inputels = $(':input:enabled:visible',$jqib);
				var fwd = !e.shiftKey && e.target == $inputels[$inputels.length-1];
				var back = e.shiftKey && e.target == $inputels[0];
				if (fwd||back) {
					etTimeout(function() {
						if (!$inputels) {
							return;
						}
						var el = $inputels[back === true?$inputels.length-1:0];
						if(el) {
							el.focus();
						}
					},10);
					return false;
				}
			}
		};
		
		var positionPrompt = function() {
			$jqib.css({position:(ie6)?"absolute":"fixed",height:$window.height(),width:"100%",top:(ie6)?$window.scrollTop():0,left:0,right:0,bottom:0});
			var heightPapa = $j('.jqicontainer').height();
			if (heightPapa != null) {
				options.marginTop = '-' + ((heightPapa) / 2) + 'px';
			}
			$jqif.css({position:"absolute",height:$window.height(),width:"100%",top:0,left:0,right:0,bottom:0});$jqi.css({position:"absolute",top:options.top,marginTop:options.marginTop,left:"50%",marginLeft:(ie6)?-600:(($jqi.outerWidth()/2)*-1)});
		};
		
		var stylePrompt = function() {
			$jqif.css({zIndex:options.zIndex,display:"none",opacity:options.opacity});
			$jqi.css({zIndex:options.zIndex+1,display:"none"});
			$jqib.css({zIndex:options.zIndex});
		};
		
		var removePrompt = function (callCallback,clicked,msg,formvals) {
			$jqi.remove();
			if (ie6) {
				$body.unbind('scroll',ie6scroll);
			}
			$window.unbind('resize',positionPrompt);
			$jqif.fadeOut(options.overlayspeed,function() {
				$jqif.unbind('click',fadeClicked);
				$jqif.remove();
				if (callCallback) {
					options.callback(clicked,msg,formvals);
				}
				$jqib.unbind('keypress',keyPressEventHandler);
				$jqib.remove();
		
				if (ie6&&!options.useiframe) {
					$('select').css('visibility','visible');
				}
			});
		};
		
		positionPrompt();
		stylePrompt();

		var ie6scroll = function () {
			$jqib.css({top:$window.scrollTop()});
		};
		var fadeClicked = function () {
			if (options.persistent) {
				var i=0;
				$jqib.addClass(options.prefix+'warning');
				var intervalid = setInterval(function () {
					$jqib.toggleClass(options.prefix+'warning');
					if (i++ > 1) {
						clearInterval(intervalid);
						$jqib.removeClass(options.prefix+'warning');
					}
				},100);
			} else {
				removePrompt();
			}
		};
		
		var keyPressEventHandler = function (e) {
			var key = (window.event)?event.keyCode:e.keyCode;
			if (key == 27) {
				removePrompt();
			}
			if (key == 9) {
				var $inputels = $(':input:enabled:visible',$jqib);
				var fwd = !e.shiftKey&& e.target==$inputels[$inputels.length-1];
				var back = e.shiftKey&&e.target==$inputels[0];
				if (fwd||back) {
					setTimeout(function () {
						if (!$inputels) return;
						var el = $inputels[back===true?$inputels.length-1:0];
						if (el) el.focus();
					},10);
					return false;
				}
			}
		};		
		
		var resizeend = function() {
			if (new Date() - rtime < delta) {
				setTimeout(resizeend, delta);
			} else {
				timeout = false;
				resizePrompt();
			}               
		};
		var recentre = function() {
			rtime = new Date();
			if (timeout === false) {
				timeout = true;
				setTimeout(resizeend, delta);
			}
		};
        
        var showLoadContent = function() {
			var marginTopCalcul = ($jqi.find('.content_module').height() / 2);
            $jqi.animate({
                'margin-top': '-=' + marginTopCalcul
            }, 300).find('.content_module').css({
                'position': 'relative',
                'display': 'none'
            }).fadeTo(0, 1).slideDown(300, function () {
                resizePrompt();
            });
		};
			
		var positionPrompt = function () {
			$jqib.css({
				position:(ie6)?"absolute":"fixed",
				height:$window.height(),
				width:"100%",
				top:(ie6)?$window.scrollTop():0,
				left:0,
				right:0,
				bottom:0
			});
			$jqif.css({
				position:"absolute",
				height:$window.height(),
				width:"100%",
				top:0,
				left:0,
				right:0,
				bottom:0
			});
			
			var heightLayer = 0,
				widthLayer = 0;
				
			nextContainer = $jqi.find('.jqicontainer');
			heightLayer = nextContainer.height();
			widthLayer = nextContainer.width();
			
			if (ie6) {
				$jqi.css({
					position:"absolute",
					top:"50%",
					marginTop:"-" + ((heightLayer + 10) / 2) + "px",
					left:"50%",
					marginLeft:"-" + (widthLayer - 35) + "px"
				});
			} else {
				$jqi.css({
					position:"absolute",
					top:"50%",
					marginTop:"-" + ((heightLayer + 10) / 2) + "px",
					left:"50%",
					marginLeft:"-" + ((widthLayer + 20) / 2) + "px"
				});
			}
		};
		
		var fadeLoad = 0;
		
		var stylePrompt = function () {
			$jqif.css({
				zIndex:options.zIndex,
				display:"none",
				opacity:options.opacity
			});
			$jqi.css({
				zIndex:options.zIndex + 1,
				display:"none"
			});
			$jqib.css({
				zIndex:options.zIndex
			});
		};
		
		var removePrompt = function (callCallback,clicked,msg,formvals) {
			$jqi.remove();
            
			if (ie6) {
				$body.unbind('scroll',ie6scroll);
			}
			$window.unbind('resize',positionPrompt);
			
			$jqif.fadeOut(options.overlayspeed,function () {
				$jqif.unbind('click',fadeClicked);
				$jqif.remove();
				if (callCallback) {
					options.callback(clicked,msg,formvals);
				}
				$jqib.unbind('keypress',keyPressEventHandler);
				$jqib.remove();
				if (ie6 && !options.useiframe) {
					$('select').css('visibility','visible');
				}
			});
		};
			
		var getWindowHeight = function() {
			var h = 0;
			if (typeof(window.innerHeight) == 'number') {
				h = window.innerHeight;
			} else if (document.documentElement && document.documentElement.clientHeight) {
				h = document.documentElement.clientHeight;
			} else if (document.body && document.body.offsetHeight) {
				h = document.body.offsetHeight;
			}
			return h;
		};

		var resizePrompt = function() {
			if (fadeLoad == 0) {
				$jqif.fadeIn(0, 0);
				$jqi.fadeIn(0, 0);
				$jqib.fadeIn(0, 0);
				fadeLoad = 1;
				
				$jqib.find(".jqimessage").wrapInner("<div class='contentmsg' />");
				$jqib.find(".jqimessage h3").each(function() {
					$j(this).insertBefore($j(this).parent());
				});
				
                if ($jqib.find(".jqimessage h3").length == 0){
                    $jqib.find("#jqistates").addClass("withouth3");
                    if( $j('.contentmsg').exists() === false ) {
                        $jqib.find(".jqimessage").append("<div class='contentmsg' />");
                    }
                }
			}
			var windowSize = getWindowHeight();
			promptSize = parseInt($jqi.find('.jqicontainer').height()) + 20;
			if (parseInt(windowSize) <= parseInt(promptSize + 30)) {
				var heightMsg = windowSize - $jqi.find('h3').height() - 104;
				
				$jqi.find('.contentmsg').css('height', heightMsg + 'px')
				positionPrompt();
			} else {
				$jqi.find('.contentmsg').css('height', 'auto')
				positionPrompt();
			}
		};
		
		resizePrompt();
		stylePrompt();

		if (ie6) {
			$window.scroll(ie6scroll);
		}
		$jqif.click(fadeClicked);
		
		$window.resize(positionPrompt);
		$window.resize(recentre);
		
		$jqib.bind("keydown keypress",keyPressEventHandler);
		$jqi.find('.' + options.prefix + 'close').click(removePrompt);
		$jqif.fadeIn(options.overlayspeed);
		$jqi[options.show](options.promptspeed,options.loaded);
		
		$jqi.find('#' + options.prefix + 'states .' + options.prefix + '_state:first .' + options.prefix + 'defaultbutton').focus();

		if (options.timeout>0) {
			setTimeout($.prompt.close,options.timeout);
		}
		
		return $jqib;
	};
	
	$.prompt.defaults = {
		prefix:         'jqi',
		buttons:        {
			Ok:true
		},
		loaded: function () {
			var colorBtnTrue = null,
				styleBtnTrue = null;
			
			$j('.jqidefaultbutton').mouseover(function() {
				if ($j(this).attr('style') != null) {
					colorBtnTrue = $j(this).css('background-color');
					styleBtnTrue = $j(this).attr('style');
					$j(this).attr('style', 'background-color:' + colorBtnBottom + ';');
				}
			}).mouseout(function() {
				if (styleBtnTrue != null) {
					$j(this).attr('style', styleBtnTrue);
				}
			});
		},
		submit: function () {
			return true;
		},
		callback: function () {},
		opacity:        0.6,
		zIndex:         2147483646,
		overlayspeed:   'slow',
		promptspeed:    'fast',
		show:           'fadeIn',
		focus:          0,
		useiframe:      false,
		top:            '50%',
		marginTop:      '-250px',
		persistent:     true,
		timeout:        0,
		state: {
			html:'',
			buttons:{
				Ok:true
			},
			focus:0,
			submit:function () {
				return true;
			}
		},
		onglet:         {},
		bgUnder:        '',
		gradient:       {
			top:'#',
			bottom:'#'
		},
        loadURL:        null,
        workBeforeShow: null
	};
	
	$.prompt.currentPrefix = $.prompt.defaults.prefix;
	$.prompt.setDefaults = function (o) {
		$.prompt.defaults = $.extend({},$.prompt.defaults,o);
	};
	
	$.prompt.setStateDefaults = function (o) {
		$.prompt.defaults.state = $.extend({},$.prompt.defaults.state,o);
	};
	
	$.prompt.getStateContent = function (state) {
		return $('#' + $.prompt.currentPrefix + '_state_' + state);
	};
	
	$.prompt.getCurrentState = function () {
		return $('.' + $.prompt.currentPrefix + '_state:visible');
	};
	
	$.prompt.getCurrentStateName = function () {
		var stateid = $.prompt.getCurrentState().attr('id');
		return stateid.replace($.prompt.currentPrefix + '_state_','');
	};
	
	$.prompt.goToState = function (state) {
		$('.' + $.prompt.currentPrefix + '_state').slideUp('slow');
		$('#' + $.prompt.currentPrefix + '_state_' + state).slideDown('slow',function () {
			$(this).find('.' + $.prompt.currentPrefix + 'defaultbutton').focus();
		});
	};
	
	$.prompt.nextState = function () {
		var $next = $('.' + $.prompt.currentPrefix + '_state:visible').next();
		$('.' + $.prompt.currentPrefix + '_state').slideUp('slow');
		$next.slideDown('slow',function () {
			$next.find('.' + $.prompt.currentPrefix + 'defaultbutton').focus();
		});
	};
	
	$.prompt.prevState = function () {
		var $next = $('.' + $.prompt.currentPrefix + '_state:visible').prev();
		$('.' + $.prompt.currentPrefix + '_state').slideUp('slow');
		$next.slideDown('slow',function () {
			$next.find('.' + $.prompt.currentPrefix + 'defaultbutton').focus();
		})
	};
	
	$.prompt.close = function () {
		$('#' + $.prompt.currentPrefix + 'box').fadeOut('fast',function () {
			$(this).remove();
		});
	};

})(jQuery);