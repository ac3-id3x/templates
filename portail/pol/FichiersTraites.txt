Fichiers dont les macros ont été modifiés en SLPRO au lieu de IMMOBC

incl_haut_base.htm
incl_visuels.htm
incl_outils.htm
annonce_edit_choix.htm

en cours gestann et incl_hgestann --verification de l'utilité de toutes les macros



TODO:
Pascal: 
	- dans fichier incl_annonce_petitform.htm: pourquoi pas de check des NC des infos suplementaires 
				sur le rapatriement des donnees d'une annonce : ex: http://annonces.selogerpro.com.id2.poliris.net/17747221/annonce_edit.htm
	- dans le fichier p_languesparlees.htm, il y a un bug qui disparait des que j'enleve le incl_hautpop.htm


MACRO!!
/////////


			// ----------------------------------------------------------------------
			//// <summary>
			//// Donnees d'un utilisateur en session ou cookie si authentifié.
			//// </summary>
			//// <remarks>La macro vérifie que l'on est authentifié sur un webdomain. 
			//// L'argument webdomain est optionnel, si il est omis, le domaine du hostname sera utilisé.
			//// </remarks>
			//// <returns name="nom"> Nom</returns>
			//// <returns name="prenom"> Prénom</returns>
			//// <returns name="email"> Adresse email</returns>
			//// <returns name="telephone"> Numéro de téléphone</returns>
			//// <returns name="adresse"> Adresse</returns>
			//// <returns name="cp"> Code postal</returns>
			//// <returns name="ville"> Ville</returns>
			//// <returns name="idpays"> Identifiant du pays</returns>
			//// <returns name="raisonsocial"> Raison sociale</returns>
			//// <returns name="rcs"> Numéro de rcs</returns>
			//// <returns name="cartepro"> Numéro de carte pro</returns>
			//// <returns name="civilite"> Civilité</returns>
			//// <returns name="si_optim"> Optim</returns>
			//// <returns name="is_email_valide"> Validité de l'adresse email</returns>
			//// <returns name="idagence"> Identifiant de l'agence</returns>
			//// <returns name="idtypepublication"> Code type publication</returns>
			//// <returns name="cartetransaction"> cartetransaction</returns>
			//// <returns name="cartegestion"> cartegestion</returns>
			//// <returns name="idclient"> Identifiant client dans emonet</returns>
			//// <returns name="fax"> Numéro du fax</returns>
			//// <returns name="respag"> Responsable agence</returns>
			////
			//// <warning> Attention cette liste ne sera pas systématiquement remplie, il s'agit du "maximum" autorisé tout univers confondu.</warning>
			//// <param type="qry" name="webdomain" optional="true"> Webdomain spécifique de login. </param>
			//// <param type="cfg" name="cfg_auth_webdomain" optional="true"> Webdomain spécifique de login. </param>
			//// <param type="cfg" name="cfg_auth_magic_string_action" optional="true"> Mode de connexion en magic string, 3 paramétres possibles.
			//// 1. none
			//// 2. loose
			//// 3. full </param>
			//// <param type="cfg" name="cfg_auth_cookie_action" optional="true"> Mode de connexion en cookie, 3 paramétres possibles.
			//// 1. none
			//// 2. loose
			//// 3. full </param>
			//// <update author="Myrieme" date="2006-11-09"> Création </update>
			// ----------------------------------------------------------------------
			case "DATA_AUTH" :
			{
				AuthWeb.D = D;


				// Récupération des paramètres
				string reqWebDomain = F.Request("webdomain");
				string namedArgWebDomain = null;
				if (lstParamNamed.ContainsKey("webdomain")) namedArgWebDomain = lstParamNamed["webdomain"] as string;
				string cfgWebDomain = DicConfig["cfg_auth_webdomain"];
				string cfgMagicStringAction = DicConfig["cfg_auth_magic_string_action"];
				if (cfgMagicStringAction == null || cfgMagicStringAction == "") cfgMagicStringAction = "loose";
				string cfgCookieAction = DicConfig["cfg_auth_cookie_action"];
				if (cfgCookieAction == null || cfgCookieAction == "") cfgCookieAction = "loose";

				// Récupération du webdomain, par ordre de priorité:
				// 1: donné en request string
				// 2: donné en paramètre nommé
				// 3: via la config
				// si non donné, on utilise le hostname actuel
				string webDomain = null;
				webDomain = reqWebDomain;
				if (webDomain == null) webDomain = namedArgWebDomain;
				if (webDomain == null) webDomain = cfgWebDomain;
				if (webDomain == null) webDomain = Id3Context.GlobalVariables.HostName;


				// Création et initialisation de l'objet AuthWeb
				AuthWeb authWeb = new AuthWeb();
				authWeb.SetWebDomain(webDomain);


				// Récupération de l'état d'authentification de l'utilisateur par:
				// 1. "Faux" cookie de session
				// 2. magic string
				// 3. cookie dur

				// 1. récupération depuis le cookie de session
				string cookieSessionValue = "";
				if (F.Cookie(authWeb.SessionParamName) != null)
				{
					cookieSessionValue = F.Cookie(authWeb.SessionParamName);
				}
				if (authWeb.RecoverAuthFromSession(cookieSessionValue))
				{
					D.Dbg("Récupéré du cookie de session : authWeb.IsAuthentified = [{0}]", authWeb.IsAuthentified);
				}					
					
				if (!authWeb.IsAuthentified)
				{
					// 2. récupération en magic string : URI de test http://annoncestest.seloger.net.xdev.poliris.net/2|10669|klb/login_ok.htm
					string uri = string.Format("http://{0}{1}", Id3Context.GlobalVariables.HostName, Id3Context.GlobalVariables.PagePath);		
					if (F.StringCompare(cfgMagicStringAction, "loose", true) || F.StringCompare(cfgMagicStringAction, "full", true))
					{
						if (authWeb.RecoverAuthFromMagic(uri))
						{
							D.Dbg("Récupéré de la magic string");
						 	authWeb.GetAuthInfo().LooseMode = F.StringCompare(cfgMagicStringAction, "loose", true);
						}
					}
				}
				if (!authWeb.IsAuthentified)
				{
					// 3. récupération depuis le cookie
					if (F.StringCompare(cfgCookieAction, "loose", true) || F.StringCompare(cfgCookieAction, "full", true))
					{
						string cookieValue = "";
						if (F.Cookie(authWeb.CookieName) != null)
						{
							cookieValue = F.Cookie(authWeb.CookieName);
						}
						if (authWeb.RecoverAuthFromCookie(cookieValue))
						{
							D.Dbg("Récupéré du cookie");
							authWeb.GetAuthInfo().LooseMode = F.StringCompare(cfgCookieAction, "loose", true);
						}
					}					
				}				


				// S'il y a eu authentification alors on retoune les données
				if (authWeb.IsAuthentified)
				{
	
					// Ici, on est authentifié et l'accès est autorisé, récupération des infos du compte
					AuthInfo info = authWeb.GetAuthInfo();							
	
					// Renvoi de tous les attributs disponibles de l'agence

					foreach(AuthAttribut att in info.Attributs)
					{
						if (!att.IsInvalid)
						{
							if (att.IsMultiple)
							{
								object[] valMult = att.Valeur as object[];
								for (int i = 0; i<valMult.Length; i++)
								{
									if (valMult[i] != null)
									{
										D.Dbg("Macro : "+ sMacroName + ":" + att.Libelle.ToUpper() + (i+1).ToString() +  " = " + valMult[i].ToString());
										DicMacros[sMacroName + ":" + att.Libelle.ToUpper() + (i+1).ToString()] = valMult[i].ToString();
									}
								}
							}	
							else
							{
								D.Dbg("Macro : "+ sMacroName + ":" + att.Libelle.ToUpper() +  " = " + att.Valeur.ToString());
								DicMacros[sMacroName + ":" + att.Libelle.ToUpper()] = att.Valeur.ToString();
							}
						}
					}
				}
				break;
			}


//////////			
