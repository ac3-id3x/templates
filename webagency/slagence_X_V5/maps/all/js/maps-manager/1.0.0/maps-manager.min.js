function mapsManagerConstructor(t) {
    var e = "/z/webagency/slagence_X_V5",
        a = "/1.4.0",
        o = e + "/css/leaflet" + a,
        i = e + "/scripts/libs/leaflet" + a;
    (this.mapLibraries = {
        BINGMAP: {
            genericName: "BINGMAP",
            defaultOptions: {},
            libraries: {
                autoComplete: { libraryReady: !1, libraryEval: "ok", nbFiles: 0, list: [] },
                drawing: { libraryReady: !1, libraryEval: "ok", nbFiles: 0, list: [] },
                main: { libraryReady: !1, libraryEval: "ok", nbFiles: 0, list: [] },
            },
        },
        OPENSTREETMAP: {
            genericName: "OPENSTREETMAP",
            defaultOptions: {
                attribution: '<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a> | &copy; <a href="http://www.ac3-groupe.com/">Groupe AC3</a>',
                tilesServerUrl: "https://osm.immo-facile.com/osm_tiles/{z}/{x}/{y}.png",
                zoomLevel: 15,
            },
            defaultViews: [
                { name: "FRANCE", zoomLevel: 5, lat: 46.198591232299805, lon: 2.17726731300354 },
                { name: "WORLD", zoomLevel: 2, lat: 32, lon: 0 },
            ],
            libraries: {
                autoComplete: {
                    libraryReady: !1,
                    libraryEval: "EasyAutocomplete",
                    nbFiles: 0,
                    list: [
                        { type: "css", url: e + "/css/jquery/easy-autocomplete.min.css" },
                        { type: "js", url: e + "/scripts/libs/jquery/jquery.easy-autocomplete.min.js" },
                    ],
                },
                drawing: {
                    libraryReady: !1,
                    libraryEval: "ok",
                    nbFiles: 0,
                    list: [
                        { type: "css", url: o + "/leaflet.draw.css" },
                        { type: "js", url: i + "/Leaflet.draw.js" },
                        { type: "js", url: i + "/locales.draw/draw.en.js" },
                        { type: "js", url: i + "/locales.draw/draw.es.js" },
                        { type: "js", url: i + "/locales.draw/draw.fr.js" },
                        { type: "js", url: i + "/Control.Draw.js" },
                        { type: "js", url: i + "/Leaflet.Draw.Event.js" },
                        { type: "js", url: i + "/Toolbar.js" },
                        { type: "js", url: i + "/Tooltip.js" },
                        { type: "js", url: i + "/ext/GeometryUtil.js" },
                        { type: "js", url: i + "/ext/LatLngUtil.js" },
                        { type: "js", url: i + "/ext/LineUtil.Intersect.js" },
                        { type: "js", url: i + "/ext/Polygon.Intersect.js" },
                        { type: "js", url: i + "/ext/Polyline.Intersect.js" },
                        { type: "js", url: i + "/ext/TouchEvents.js" },
                        { type: "js", url: i + "/draw/DrawToolbar.js" },
                        { type: "js", url: i + "/draw/handler/Draw.Feature.js" },
                        { type: "js", url: i + "/draw/handler/Draw.SimpleShape.js" },
                        { type: "js", url: i + "/draw/handler/Draw.Circle.js" },
                        { type: "js", url: i + "/draw/handler/Draw.Marker.js" },
                        { type: "js", url: i + "/draw/handler/Draw.CircleMarker.js" },
                        { type: "js", url: i + "/draw/handler/Draw.Polyline.js" },
                        { type: "js", url: i + "/draw/handler/Draw.Polygon.js" },
                        { type: "js", url: i + "/draw/handler/Draw.Rectangle.js" },
                        { type: "js", url: i + "/edit/EditToolbar.js" },
                        { type: "js", url: i + "/edit/handler/EditToolbar.Delete.js" },
                        { type: "js", url: i + "/edit/handler/EditToolbar.Edit.js" },
                        { type: "js", url: i + "/edit/handler/Edit.SimpleShape.js" },
                        { type: "js", url: i + "/edit/handler/Edit.CircleMarker.js" },
                        { type: "js", url: i + "/edit/handler/Edit.Circle.js" },
                        { type: "js", url: i + "/edit/handler/Edit.Marker.js" },
                        { type: "js", url: i + "/edit/handler/Edit.Poly.js" },
                        { type: "js", url: i + "/edit/handler/Edit.Rectangle.js" },
                    ],
                },
                main: {
                    libraryReady: !1,
                    libraryEval: "L",
                    nbFiles: 0,
                    list: [
                        { type: "css", url: o + "/leaflet.css" },
                        { type: "js", url: i + "/leaflet.js" },
                    ],
                },
                zoomBar: {
                    libraryReady: !1,
                    libraryEval: "L.Control.ZoomBar",
                    nbFiles: 0,
                    list: [
                        { type: "css", url: o + "/L.Control.ZoomBar.css" },
                        { type: "js", url: i + "/L.Control.ZoomBar.js" },
                    ],
                },
            },
        },
    }),
        (this.id3xIconsList = [
            { width: 31, height: 31, name: "ajax-loader.gif" },
            { width: 16, height: 16, name: "ajax-loader-small.gif" },
            { width: 32, height: 47, name: "ajout_ville.png" },
            { width: 32, height: 47, name: "pinAgence_bleu.png" },
            { width: 32, height: 47, name: "pinAgence_bleu_clair.png" },
            { width: 50, height: 50, name: "pinAgence_confiance.png" },
            { width: 44, height: 34, name: "pinAgence_cph.png" },
            { width: 27, height: 42, name: "pinAgence_gi.png" },
            { width: 32, height: 47, name: "pinAgence_gris.png" },
            { width: 32, height: 47, name: "pinAgence_gris_clair.png" },
            { width: 32, height: 47, name: "pinAgence_gris_fonce.png" },
            { width: 32, height: 47, name: "pinAgence_gris_marron.png" },
            { width: 32, height: 47, name: "pinAgence_jaune.png" },
            { width: 25, height: 25, name: "pinAgence_laforet.png" },
            { width: 32, height: 47, name: "pinAgence_or.png" },
            { width: 32, height: 47, name: "pinAgence_orange.png" },
            { width: 25, height: 31, name: "pinAgence_orpi.png" },
            { width: 32, height: 47, name: "pinAgence_rose.png" },
            { width: 32, height: 47, name: "pinAgence_rouge.png" },
            { width: 32, height: 47, name: "pinAgence_vert.png" },
            { width: 32, height: 47, name: "pinAgence_vert_clair.png" },
            { width: 32, height: 47, name: "pinAgence_violet.png" },
            { width: 15, height: 15, name: "pinDraw.png" },
            { width: 25, height: 25, name: "pinDrawStart.png" },
            { width: 32, height: 47, name: "user.png" },
        ]),
        (this.api = { geolocation: { url: "https://mgt-apim.pericles.fr/public/addok/1.0.0/search?" } }),
        (this.translations = { en: { noCoordinates: "<b>no coordinates availables :<br />the map can not be precise.</b>" }, fr: { noCoordinates: "<b>aucune coordonnée disponible :<br />la carte ne peut pas être précise.</b>" } }),
        (this.mapDataType = { ADMINISTRATIVE_DIVISION: "ADMINISTRATIVE_DIVISION", AGENCIES: "AGENCIES", NONE: "NONE", ONLINE_ESTIMATE: "ONLINE_ESTIMATE", REALESTATES: "REALESTATES", SINGLE_REALESTATE: "SINGLE_REALESTATE" }),
        (this.processingStatus = { EMPTY: "EMPTY", LOADING: "LOADING", READY: "READY" });
    var s = {
            name: "#",
            autoCompleteFeature: { enabled: !1 },
            addDrawingFeatureToMaps: !1,
            defaultMapLibrary: "OPENSTREETMAP",
            language: "",
            mapDataList: {
                administrative_division: { processingStatus: this.processingStatus.EMPTY, data: [] },
                agencies: { processingStatus: this.processingStatus.EMPTY, data: [], url: "/maps,ag.js" },
                onlineEstimate: { processingStatus: this.processingStatus.EMPTY, data: [], itemsList: [] },
                realEstates: { processingStatus: this.processingStatus.EMPTY, data: [] },
                singleRealEstate: { processingStatus: this.processingStatus.EMPTY, data: [] },
            },
            mapObjectList: [],
            outputDebug: { api: !1, data: !1, map: !1, manager: !1, marker: !1 },
        },
        r = { mapDataList: { administrative_division: {}, agencies: {}, onlineEstimate: {}, realEstates: {}, singleRealEstate: {} } };
    this.observeTreeParameters(r, t),
        void 0 !== t.autoCompleteFeature && (this.autoCompleteFeature = { enabled: this.setPropertyValue(s.autoCompleteFeature.enabled, r.autoCompleteFeature ? t.autoCompleteFeature.enabled : void 0) }),
        (this.addDrawingFeatureToMaps = this.setPropertyValue(s.addDrawingFeatureToMaps, t.addDrawingFeatureToMaps)),
        (this.deviceGeolocation = { accuracy: "", allowed: !1, latitude: null, longitude: null }),
        (this.defaultMapLibrary = this.setPropertyValue(s.defaultMapLibrary, t.defaultMapLibrary)),
        (this.httpsContext = !1),
        (this.language = this.setPropertyValue(s.language, t.language)),
        (this.mapDataList = this.setPropertyValue(s.mapDataList, t.mapDataList)),
        void 0 !== t.mapDataList &&
            ((this.mapDataList = {
                administrative_division: this.setPropertyValue(s.mapDataList.administrative_division, r.mapDataList ? t.mapDataList.administrative_division : void 0),
                agencies: this.setPropertyValue(s.mapDataList.agencies, r.mapDataList ? t.mapDataList.agencies : void 0),
                onlineEstimate: this.setPropertyValue(s.mapDataList.onlineEstimate, r.mapDataList ? t.mapDataList.onlineEstimate : void 0),
                realEstates: this.setPropertyValue(s.mapDataList.realEstates, r.mapDataList ? t.mapDataList.realEstates : void 0),
                singleRealEstate: this.setPropertyValue(s.mapDataList.singleRealEstate, r.mapDataList ? t.mapDataList.singleRealEstate : void 0),
            }),
            void 0 !== t.mapDataList.administrative_division &&
                (this.mapDataList.administrative_division = {
                    processingStatus: this.processingStatus.EMPTY,
                    data: this.setPropertyValue(s.mapDataList.administrative_division.data, r.mapDataList.administrative_division ? t.mapDataList.administrative_division.data : void 0),
                }),
            void 0 !== t.mapDataList.agencies &&
                (this.mapDataList.agencies = { processingStatus: this.processingStatus.EMPTY, data: this.setPropertyValue(s.mapDataList.agencies.data, r.mapDataList.agencies ? t.mapDataList.agencies.data : void 0) }),
            void 0 !== t.mapDataList.onlineEstimate &&
                (this.mapDataList.onlineEstimate = {
                    processingStatus: this.processingStatus.EMPTY,
                    data: this.setPropertyValue(s.mapDataList.onlineEstimate.data, r.mapDataList.onlineEstimate ? t.mapDataList.onlineEstimate.data : void 0),
                }),
            void 0 !== t.mapDataList.realEstates &&
                (this.mapDataList.realEstates = { processingStatus: this.processingStatus.EMPTY, data: this.setPropertyValue(s.mapDataList.realEstates.data, r.mapDataList.realEstates ? t.mapDataList.realEstates.data : void 0) }),
            void 0 !== t.mapDataList.singleRealEstate &&
                (this.mapDataList.singleRealEstate = {
                    processingStatus: this.processingStatus.EMPTY,
                    data: this.setPropertyValue(s.mapDataList.singleRealEstate.data, r.mapDataList.singleRealEstate ? t.mapDataList.singleRealEstate.data : void 0),
                })),
        (this.mapObjectList = this.setPropertyValue(s.mapObjectList, t.mapObjectList)),
        (this.name = this.setPropertyValue(s.name, t.name)),
        (this.outputDebug = this.setPropertyValue(s.outputDebug, t.outputDebug)),
        (this.version = "1.0.0"),
        this.initComponent(),
        this.outputDebug.manager && this.showOutputDebug({ shortName: "mapsManagerConstructor()", objectValue: this });
}
!(function () {
    if ("function" == typeof window.CustomEvent) return !1;
    function t(t, e) {
        e = e || { bubbles: !1, cancelable: !1, detail: void 0 };
        var a = document.createEvent("CustomEvent");
        return a.initCustomEvent(t, e.bubbles, e.cancelable, e.detail), a;
    }
    (t.prototype = window.Event.prototype), (window.CustomEvent = t);
})(),
    (mapsManagerConstructor.prototype.initComponent = function () {
        (this.httpsContext = this.isHttps()), "" == this.language && (this.language = this.getPageLanguage());
        var t = this.mapDataList;
        t.administrative_division.data.length > 0 && (t.administrative_division.processingStatus = this.processingStatus.READY),
            t.agencies.data.length > 0 && (t.agencies.processingStatus = this.processingStatus.READY),
            t.onlineEstimate.data.length > 0 && (t.onlineEstimate.processingStatus = this.processingStatus.READY),
            t.realEstates.data.length > 0 && (t.realEstates.processingStatus = this.processingStatus.READY),
            t.singleRealEstate.data.length > 0 && (t.singleRealEstate.processingStatus = this.processingStatus.READY);
    }),
    (mapsManagerConstructor.prototype.observeTreeParameters = function (treeObject, pParams) {
        for (var property in treeObject) eval("pParams." + property) ? this.observeTreeParameters(treeObject.property, eval("pParams." + property)) : (treeObject[property] = !1);
    }),
    (mapsManagerConstructor.prototype.markerIcon = function (t) {
        var e = { defaultIcon: { classCss: "", color: "gris", pictureName: "pinAgence_gris.png", size: { height: 47, width: 32 }, styleCss: "", url: "/z/webagency/slagence_X_V5/images/carto/" } },
            a = { defaultIcon: { size: {} } };
        this.observeTreeParameters(a, t),
            void 0 !== t.defaultIcon &&
                ((e.defaultIcon = {
                    classCss: this.setPropertyValue(e.defaultIcon.classCss, a.defaultIcon ? t.defaultIcon.classCss : void 0),
                    color: this.setPropertyValue(e.defaultIcon.color, a.defaultIcon ? t.defaultIcon.color : void 0),
                    pictureName: this.setPropertyValue(e.defaultIcon.pictureName, a.defaultIcon ? t.defaultIcon.pictureName : void 0),
                    size: this.setPropertyValue(e.defaultIcon.size, a.defaultIcon ? t.defaultIcon.size : void 0),
                    styleCss: this.setPropertyValue(e.defaultIcon.styleCss, a.defaultIcon ? t.defaultIcon.styleCss : void 0),
                    url: this.setPropertyValue(e.defaultIcon.url, a.defaultIcon ? t.defaultIcon.url : void 0),
                }),
                void 0 !== t.defaultIcon.size &&
                    (e.defaultIcon.size = {
                        height: this.setPropertyValue(e.defaultIcon.size.height, a.defaultIcon.size ? t.defaultIcon.size.height : void 0),
                        width: this.setPropertyValue(e.defaultIcon.size.width, a.defaultIcon.size ? t.defaultIcon.size.width : void 0),
                    })),
            "gris" != e.defaultIcon.color && "" != e.defaultIcon.color && (e.defaultIcon.pictureName = "pinAgence_" + e.defaultIcon.color + ".png");
        for (var o = 0, i = this.id3xIconsList, s = !0; s && o < i.length; ) i[o].name == e.defaultIcon.pictureName && ((e.defaultIcon.size = { height: i[o].height, width: i[o].width }), (s = !1)), o++;
        return e;
    }),
    (mapsManagerConstructor.prototype.getMapObject = function (t) {
        var e = null;
        for (m = 0; m < this.mapObjectList.length; m++) 1 == t.typeSearch && this.mapObjectList[m].container.id == t.search && (e = this.mapObjectList[m]);
        return e;
    }),
    (mapsManagerConstructor.prototype.addMapObject = function (t) {
        var e = !0,
            a = void 0 !== t.container && void 0 !== t.container.id ? t.container.id : null;
        if (null != a) {
            var o = !1;
            for (m = 0; m < this.mapObjectList.length; m++) this.mapObjectList[m].container.id == a && this.mapObjectList[m].isLoaded && (o = !0);
            if (!o) {
                var i = {
                    container: { cssClass: { addClass: "", removeClass: "", replaceClass: [] }, cssStyle: { addStyle: "", removeStyle: "", replaceStyle: [] }, domElement: null, id: "" },
                    idMap: "",
                    isLoaded: !1,
                    map: null,
                    mapData: [],
                    mapLibrary: this.mapLibraries.OPENSTREETMAP.genericName,
                    markerList: [],
                    options: null,
                    readyToLoad: !1,
                };
                if (((i.idMap = "map-" + (this.mapObjectList.length + 1).toString()), void 0 !== t.mapData)) {
                    var s = t.mapData;
                    if (Array.isArray(s)) {
                        var r = null,
                            n = null;
                        for (d = 0; d < s.length; d++)
                            if (
                                void 0 !== (n = s[d]).mapDataType &&
                                ((r = null),
                                n.mapDataType == this.mapDataType.ADMINISTRATIVE_DIVISION &&
                                    (r = {
                                        mapDataType: n.mapDataType,
                                        filters: [],
                                        data: { events: null },
                                        marker: { events: null, icon: null, popup: !1 },
                                        division: { city: { label: "", zoomLevel: 13 }, country: { label: "", zoomLevel: 5 }, department: { label: "", zoomLevel: 12 }, region: { label: "", zoomLevel: 7 } },
                                    }),
                                n.mapDataType == this.mapDataType.AGENCIES && (r = { mapDataType: n.mapDataType, filters: [], data: { events: null, url: null }, marker: { events: null, icon: null, popup: !1 } }),
                                n.mapDataType == this.mapDataType.ONLINE_ESTIMATE && (r = { mapDataType: n.mapDataType, filters: [], data: { events: null }, marker: { events: null, icon: null, popup: !1 } }),
                                n.mapDataType == this.mapDataType.REALESTATES &&
                                    (r = { mapDataType: n.mapDataType, filters: [], data: { events: null }, marker: { events: null, icon: null, popup: !1 }, pinVille: 0, transactionTypeSelectorId: "" }),
                                n.mapDataType == this.mapDataType.SINGLE_REALESTATE && (r = { mapDataType: n.mapDataType, filters: [], data: { events: null }, marker: { events: null, icon: null, popup: !1 } }),
                                null != r)
                            ) {
                                if (void 0 !== r.marker.icon) {
                                    var l = n.marker.icon;
                                    r.marker.icon = void 0 === l ? this.markerIcon({}) : null != l ? this.markerIcon(l) : null;
                                }
                                if (void 0 !== r.division) {
                                    var p = n.division;
                                    if (void 0 !== p) {
                                        var u = p.city,
                                            c = p.country,
                                            g = p.department,
                                            h = p.region;
                                        void 0 !== u && (void 0 !== u.label && (r.division.city.label = u.label), void 0 !== u.zoomLevel && (r.division.city.zoomLevel = u.zoomLevel)),
                                            void 0 !== c && (void 0 !== c.label && (r.division.country.label = c.label), void 0 !== c.zoomLevel && (r.division.country.zoomLevel = c.zoomLevel)),
                                            void 0 !== g && (void 0 !== g.label && (r.division.department.label = g.label), void 0 !== g.zoomLevel && (r.division.department.zoomLevel = g.zoomLevel)),
                                            void 0 !== h && (void 0 !== h.label && (r.division.region.label = h.label), void 0 !== h.zoomLevel && (r.division.region.zoomLevel = h.zoomLevel));
                                    }
                                }
                                if (void 0 !== r.filters) {
                                    var b = n.filters;
                                    if (void 0 !== b && Array.isArray(b)) {
                                        var y = null,
                                            v = null,
                                            E = null;
                                        for (f = 0; f < b.length; f++)
                                            (v = b[f].key),
                                                (E = b[f].value),
                                                void 0 !== v && void 0 !== E && "" != v.trim() && ((y = b[f].action), r.filters.push({ action: void 0 !== y ? y : "", key: v.trim(), value: "string" != typeof E ? E : E.trim() }));
                                    }
                                }
                                if (
                                    (void 0 !== r.pinVille && (r.pinVille = void 0 !== n.pinVille && "1" == n.pinVille ? 1 : 0),
                                    void 0 !== r.transactionTypeSelectorId && (r.transactionTypeSelectorId = void 0 !== n.transactionTypeSelectorId ? n.transactionTypeSelectorId : ""),
                                    void 0 !== n.data)
                                ) {
                                    void 0 !== (D = n.data.events) &&
                                        ((r.data.events = { enableDataLoad: !1, onDataLoad: function (t, e) {} }), void 0 !== D.onDataLoad && ((r.data.events.enableDataLoad = !0), (r.data.events.onDataLoad = D.onDataLoad)));
                                    var L = n.data.url;
                                    void 0 !== L && (r.data.url = L);
                                }
                                var D;
                                if (void 0 !== n.marker)
                                    void 0 !== (D = n.marker.events) &&
                                        ((r.marker.events = { enableMarkerClick: !1, onMarkerClick: function (t) {} }),
                                        void 0 !== D.onMarkerClick && ((r.marker.events.enableMarkerClick = !0), (r.marker.events.onMarkerClick = D.onMarkerClick)));
                                var _ = n.marker.popup;
                                void 0 !== _ && (r.marker.popup = _), i.mapData.push(r);
                            }
                    }
                }
                if (((i.mapLibrary = this.setPropertyValue(i.mapLibrary, t.mapLibrary)), i.mapLibrary, this.mapLibraries.BINGMAP.genericName, i.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
                    var T = { container: { cssClass: {}, cssStyle: {} }, options: { fixes: {}, toolBar: { buttons: { zoomIn: {}, zoomOut: {}, zoomStart: {}, zoomArea: {} } } } };
                    this.observeTreeParameters(T, t),
                        (i.options = {
                            autoCompleteFeature: { autoCompleteMarker: null, enabled: !1, inputContainerId: "" },
                            addDrawingFeatureToMap: !1,
                            fixes: { zIndexFix: !0 },
                            listing: !1,
                            pageAcquerir: "" != id3xContent.values.acquerirIdt,
                            pageEstimation: "" != id3xContent.values.estimationIdt,
                            toolBar: {
                                fixCssToolbar: !0,
                                position: "topright",
                                buttons: {
                                    zoomIn: { title: "Zoom avant" },
                                    zoomOut: { title: "Zoom arrière" },
                                    zoomStart: { title: "Revenir à la position initiale" },
                                    zoomArea: { enableGeolocation: !0, title: "Me localiser", titleAccuracy: "Me localiser (précision à {0}m)", zoomLevel: 13 },
                                },
                            },
                        }),
                        void 0 !== t.container &&
                            ((i.container.domElement = this.setPropertyValue(i.container.domElement, T.container ? t.container.domElement : void 0)),
                            (i.container.id = this.setPropertyValue(i.container.id, T.container ? t.container.id : void 0)),
                            void 0 !== t.container.cssClass &&
                                (i.container.cssClass = {
                                    addClass: this.setPropertyValue(i.container.cssClass.addClass, T.container.cssClass ? t.container.cssClass.addClass : void 0),
                                    removeClass: this.setPropertyValue(i.container.cssClass.removeClass, T.container.cssClass ? t.container.cssClass.removeClass : void 0),
                                    replaceClass: this.setPropertyValue(i.container.cssClass.replaceClass, T.container.cssClass ? t.container.cssClass.replaceClass : void 0),
                                }),
                            void 0 !== t.container.cssStyle &&
                                (i.container.cssStyle = {
                                    addStyle: this.setPropertyValue(i.container.cssStyle.addStyle, T.container.cssStyle ? t.container.cssStyle.addStyle : void 0),
                                    removeStyle: this.setPropertyValue(i.container.cssStyle.removeStyle, T.container.cssStyle ? t.container.cssStyle.removeStyle : void 0),
                                    replaceStyle: this.setPropertyValue(i.container.cssStyle.replaceStyle, T.container.cssStyle ? t.container.cssStyle.replaceStyle : void 0),
                                })),
                        void 0 !== t.options &&
                            ((i.options = {
                                autoCompleteFeature: this.setPropertyValue(i.options.autoCompleteFeature, T.options ? t.options.autoCompleteFeature : void 0),
                                addDrawingFeatureToMap: this.setPropertyValue(i.options.addDrawingFeatureToMap, T.options ? t.options.addDrawingFeatureToMap : void 0),
                                fixes: this.setPropertyValue(i.options.fixes, T.options ? t.options.fixes : void 0),
                                listing: this.setPropertyValue(i.options.listing, T.options ? t.options.listing : void 0),
                                pageAcquerir: this.setPropertyValue(i.options.pageAcquerir, T.options ? t.options.pageAcquerir : void 0),
                                pageEstimation: this.setPropertyValue(i.options.pageEstimation, T.options ? t.options.pageEstimation : void 0),
                                toolBar: this.setPropertyValue(i.options.toolBar, T.options ? t.options.toolBar : void 0),
                            }),
                            void 0 !== t.options.autoCompleteFeature &&
                                (i.options.autoCompleteFeature = {
                                    enabled: this.setPropertyValue(i.options.autoCompleteFeature.enabled, T.options.autoCompleteFeature ? t.options.autoCompleteFeature.enabled : void 0),
                                    inputContainerId: this.setPropertyValue(i.options.autoCompleteFeature.inputContainerId, T.options.autoCompleteFeature ? t.options.autoCompleteFeature.inputContainerId : void 0),
                                }),
                            void 0 !== t.options.fixes && (i.options.fixes = { zIndexFix: this.setPropertyValue(i.options.fixes.zIndexFix, T.options.fixes ? t.options.fixes.zIndexFix : void 0) }),
                            void 0 !== t.options.toolBar &&
                                ((i.options.toolBar = {
                                    fixCssToolbar: this.setPropertyValue(i.options.toolBar.fixCssToolbar, T.options.toolBar ? t.options.toolBar.fixCssToolbar : void 0),
                                    position: this.setPropertyValue(i.options.toolBar.position, T.options.toolBar ? t.options.toolBar.position : void 0),
                                    buttons: this.setPropertyValue(i.options.toolBar.buttons, T.options.toolBar ? t.options.toolBar.buttons : void 0),
                                }),
                                void 0 !== t.options.toolBar.buttons &&
                                    ((i.options.toolBar.buttons = {
                                        zoomIn: this.setPropertyValue(i.options.toolBar.buttons.zoomIn, T.options.buttons ? t.options.toolBar.buttons.zoomIn : void 0),
                                        zoomOut: this.setPropertyValue(i.options.toolBar.buttons.zoomOut, T.options.buttons ? t.options.toolBar.buttons.zoomOut : void 0),
                                        zoomStart: this.setPropertyValue(i.options.toolBar.buttons.zoomStart, T.options.buttons ? t.options.toolBar.buttons.zoomStart : void 0),
                                        zoomArea: this.setPropertyValue(i.options.toolBar.buttons.zoomArea, T.options.buttons ? t.options.toolBar.buttons.zoomArea : void 0),
                                    }),
                                    void 0 !== t.options.toolBar.buttons.zoomIn &&
                                        (i.options.toolBar.buttons.zoomIn = { title: this.setPropertyValue(i.options.toolBar.buttons.zoomIn.title, T.options.toolBar.buttons.zoomIn ? t.options.toolBar.buttons.zoomIn.title : void 0) }),
                                    void 0 !== t.options.toolBar.buttons.zoomOut &&
                                        (i.options.toolBar.buttons.zoomOut = { title: this.setPropertyValue(i.options.toolBar.buttons.zoomOut.title, T.options.toolBar.buttons.zoomOut ? t.options.toolBar.buttons.zoomOut.title : void 0) }),
                                    void 0 !== t.options.toolBar.buttons.zoomStart &&
                                        (i.options.toolBar.buttons.zoomStart = {
                                            title: this.setPropertyValue(i.options.toolBar.buttons.zoomStart.title, T.options.toolBar.buttons.zoomStart ? t.options.toolBar.buttons.zoomStart.title : void 0),
                                        }),
                                    void 0 !== t.options.toolBar.buttons.zoomArea &&
                                        (i.options.toolBar.buttons.zoomArea = {
                                            enableGeolocation: this.setPropertyValue(i.options.toolBar.buttons.zoomArea.enableGeolocation, T.options.toolBar.buttons.zoomArea ? t.options.toolBar.buttons.zoomArea.enableGeolocation : void 0),
                                            title: this.setPropertyValue(i.options.toolBar.buttons.zoomArea.title, T.options.toolBar.buttons.zoomArea ? t.options.toolBar.buttons.zoomArea.title : void 0),
                                            titleAccuracy: this.setPropertyValue(i.options.toolBar.buttons.zoomArea.titleAccuracy, T.options.toolBar.buttons.zoomArea ? t.options.toolBar.buttons.zoomArea.titleAccuracy : void 0),
                                            zoomLevel: this.setPropertyValue(i.options.toolBar.buttons.zoomArea.zoomLevel, T.options.toolBar.buttons.zoomArea ? t.options.toolBar.buttons.zoomArea.zoomLevel : void 0),
                                        }))));
                }
                this.outputDebug.map && this.showOutputDebug({ shortName: "mapsManagerConstructor.addMapObject()", objectValue: i }),
                    i.mapLibrary != this.mapLibraries.BINGMAP.genericName && i.mapLibrary != this.mapLibraries.OPENSTREETMAP.genericName && (e = !1),
                    e && this.includeMapsLibraries({ mapObject: i }),
                    e && this.mapObjectList.push(i);
            }
        }
    }),
    (mapsManagerConstructor.prototype.includeMapsLibraries = function (t) {
        if ((t.mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, t.mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var e = this.mapLibraries.OPENSTREETMAP.libraries,
                a = !0;
            e.main.libraryReady || ((a = !1), this.injectMapLibrariesToHtml({ library: e.main, mapObject: t.mapObject })),
                e.zoomBar.libraryReady || ((a = !1), this.injectMapLibrariesToHtml({ library: e.zoomBar, mapObject: t.mapObject })),
                t.mapObject.options.addDrawingFeatureToMap && (e.drawing.libraryReady || ((a = !1), this.injectMapLibrariesToHtml({ library: e.drawing, mapObject: t.mapObject }))),
                t.mapObject.options.autoCompleteFeature.enabled && (e.autoComplete.libraryReady || ((a = !1), this.injectMapLibrariesToHtml({ library: e.autoComplete, mapObject: t.mapObject }))),
                a && ((t.mapObject.readyToLoad = !0), this.loadMap({ mapObject: t.mapObject }));
        }
        this.outputDebug.manager && this.showOutputDebug({ shortName: "mapsManagerConstructor.includeMapsLibraries()", objectValue: this });
    }),
    (mapsManagerConstructor.prototype.injectMapLibrariesToHtml = function (t) {
        if (!t.library.libraryReady) for (t.library.nbFiles = t.library.list.length, i = 0; i < t.library.list.length; i++) this.addRessourcesToHtml({ index: i, library: t.library, mapObject: t.mapObject });
    }),
    (mapsManagerConstructor.prototype.addRessourcesToHtml = function (p) {
        this.outputDebug.manager && (console.log("\r\nFile library call :"), console.log(p.library.list[p.index]));
        var _this = this,
            ressourcesFile = null;
        "js" == p.library.list[p.index].type
            ? ((ressourcesFile = document.createElement("script")), (ressourcesFile.type = "text/javascript"), (ressourcesFile.async = !1), (ressourcesFile.src = p.library.list[p.index].url))
            : "css" == p.library.list[p.index].type && ((ressourcesFile = document.createElement("link")), (ressourcesFile.type = "text/css"), (ressourcesFile.rel = "stylesheet"), (ressourcesFile.href = p.library.list[p.index].url)),
            null != ressourcesFile
                ? (document.getElementsByTagName("head")[0].appendChild(ressourcesFile),
                  (ressourcesFile.onload = function () {
                      if (
                          p.index + 1 == p.library.nbFiles &&
                          void 0 !== eval(p.library.libraryEval) &&
                          ((p.library.libraryReady = !0),
                          _this.outputDebug.manager && console.log("\r\n~> Loading finished for " + (p.index + 1).toString() + " files. Check on eval(" + p.library.libraryEval + ") : ok."),
                          p.mapObject.mapLibrary,
                          _this.mapLibraries.BINGMAP.genericName,
                          p.mapObject.mapLibrary == _this.mapLibraries.OPENSTREETMAP.genericName)
                      ) {
                          var _libraries = _this.mapLibraries.OPENSTREETMAP.libraries;
                          _libraries.main.libraryReady &&
                              _libraries.zoomBar.libraryReady &&
                              ((p.mapObject.readyToLoad = !0),
                              p.mapObject.options.addDrawingFeatureToMap && !_libraries.drawing.libraryReady && (p.mapObject.readyToLoad = !1),
                              p.mapObject.options.autoCompleteFeature.enabled && (_libraries.autoComplete.libraryReady ? _this.initializeAutoComplete({ mapObject: p.mapObject }) : (p.mapObject.readyToLoad = !1)),
                              p.mapObject.readyToLoad && _this.loadMap({ mapObject: p.mapObject }));
                      }
                  }))
                : _this.outputDebug.manager && (console.log("(!) The file no " + (p.index + 1).toString() + " is not identified as 'css' or 'js' in the library object :"), console.log(p.library.list[p.index]));
    }),
    (mapsManagerConstructor.prototype.initStringFromDate = function () {
        var t = new Date(),
            e = "" + t.getFullYear() + t.getMonth() + t.getDay() + t.getHours() + t.getMinutes() + t.getSeconds() + t.getMilliseconds();
        return this.outputDebug.manager && this.showOutputDebug({ shortName: "initStringFromDate()", stringValue: e }), e;
    }),
    (mapsManagerConstructor.prototype.isHttps = function () {
        var t = "https:" == document.location.protocol;
        return this.outputDebug.manager && this.showOutputDebug({ shortName: "isHttps()", stringValue: t }), t;
    }),
    (mapsManagerConstructor.prototype.getPageLanguage = function () {
        var t = $("html").attr("lang");
        return (t = "" != t ? t : $(this).attr("data-langue")), this.outputDebug.manager && this.showOutputDebug({ shortName: "getPageLanguage()", stringValue: t }), t;
    }),
    (mapsManagerConstructor.prototype.loadMap = function (t) {
        var e = t.mapObject,
            a = e.container.id;
        if (document.getElementById(a)) {
            var o = e.container.cssClass,
                i = e.container.cssStyle,
                s = null;
            if (2 == o.replaceClass.length || "" != o.removeClass || "" != o.addClass)
                id3xContent.values.winW < id3xContent.values.tailleW &&
                    2 == o.replaceClass.length &&
                    (s = $("#" + a)).hasClass(o.replaceClass[0]) &&
                    !s.hasClass(o.replaceClass[1]) &&
                    s.removeClass(o.replaceClass[0]).addClass(o.replaceClass[1]),
                    "" != o.removeClass && (null == s && (s = $("#" + a)), s.hasClass(o.removeClass) && s.removeClass(o.removeClass)),
                    "" != o.addClass && (null == s && (s = $("#" + a)), s.hasClass(o.addClass) || s.addClass(o.addClass));
            if (2 == i.replaceStyle.length || "" != i.removeStyle || "" != i.addClass) {
                var r = document.getElementById(a).style.cssText;
                2 == i.replaceStyle.length && (document.getElementById(a).style = r.replace(i.replaceStyle[0], i.replaceStyle[0])),
                    "" != i.removeStyle && (document.getElementById(a).style = r.replace(i.removeStyle, "")),
                    "" != i.addStyle && (document.getElementById(a).style = r + i.addStyle);
            }
        }
        if (
            (this.outputDebug.map && (console.log("\r\nloadMap(p); object in parameter 'p' is :"), console.log(e), console.log("\r\ncheck container with ID '" + a + "'"), console.log(document.getElementById(a))),
            e.readyToLoad && (e.mapLibrary, this.mapLibraries.BINGMAP.genericName, e.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName))
        ) {
            var n = this.mapLibraries.OPENSTREETMAP.defaultOptions;
            if (null != document.getElementById(a) && ((e.map = new L.map(a, { zoomControl: !1 })), null != e.map)) {
                var l = "geomap-online-estimate" != a ? 1 : 0,
                    p = this.mapLibraries.OPENSTREETMAP.defaultViews[l];
                e.map.setView([p.lat, p.lon], p.zoomLevel),
                    L.tileLayer(n.tilesServerUrl, { attribution: n.attribution }).addTo(e.map),
                    L.control.scale().addTo(e.map),
                    (e.container.domElement = document.getElementById(a)),
                    this.loadMapToolBar({ mapObject: e }),
                    this.fixCssMap({ mapObject: e });
                var m = e.mapData;
                if (m.length > 0) {
                    var u = this.mapDataList;
                    for (d = 0; d < m.length; d++) {
                        if (m[d].mapDataType == this.mapDataType.ADMINISTRATIVE_DIVISION) {
                            var c = u.administrative_division;
                            c.processingStatus == this.processingStatus.READY
                                ? (this.outputDebug.data && console.log("ADMINISTRATIVE_DIVISION : There is actually " + c.data.length.toString() + " item(s)."), this.addMarkers({ mapObject: e, mapDataIndex: d }))
                                : c.processingStatus == this.processingStatus.EMPTY && ((c.processingStatus = this.processingStatus.LOADING), this.loadMarkersData({ mapObject: e, mapDataIndex: d }));
                        }
                        if (m[d].mapDataType == this.mapDataType.AGENCIES) {
                            var g = u.agencies;
                            g.processingStatus == this.processingStatus.READY
                                ? (this.outputDebug.data && console.log("AGENCIES : There is actually " + g.data.length.toString() + " item(s)."), this.addMarkers({ mapObject: e, mapDataIndex: d }))
                                : g.processingStatus == this.processingStatus.EMPTY && ((g.processingStatus = this.processingStatus.LOADING), this.loadMarkersData({ mapObject: e, mapDataIndex: d }));
                        }
                        if (m[d].mapDataType == this.mapDataType.ONLINE_ESTIMATE) {
                            var h = u.onlineEstimate;
                            h.processingStatus == this.processingStatus.READY
                                ? (this.outputDebug.data && console.log("ONLINE_ESTIMATE : There is actually " + h.data.length.toString() + " item(s)."), this.addMarkers({ mapObject: e, mapDataIndex: d }))
                                : h.processingStatus == this.processingStatus.EMPTY && ((h.processingStatus = this.processingStatus.LOADING), this.loadMarkersData({ mapObject: e, mapDataIndex: d }));
                        }
                        if (
                            (m[d].mapDataType == this.mapDataType.REALESTATES &&
                                (u.realEstates.data.length > 0 && ((u.realEstates.data = []), (u.realEstates.processingStatus = this.processingStatus.EMPTY)), this.loadMarkersData({ mapObject: e, mapDataIndex: d })),
                            m[d].mapDataType == this.mapDataType.SINGLE_REALESTATE)
                        ) {
                            var b = u.singleRealEstate;
                            if (b.processingStatus == this.processingStatus.READY)
                                this.outputDebug.data && console.log("SINGLE_REALESTATE : There is actually " + b.data.length.toString() + " item(s)."), this.addMarkers({ mapObject: e, mapDataIndex: d });
                            else if (b.processingStatus == this.processingStatus.EMPTY) {
                                var y = null,
                                    v = id3xContent.macro.E.ANNONCE;
                                "" != v.PUBLICLAT && "" != v.PUBLICLNG && (y = { lat: v.PUBLICLAT, lon: v.PUBLICLNG }),
                                    null == y && "" != v.LATITUDE_CARTO && "" != v.LONGITUDE_CARTO && (y = { lat: v.LATITUDE_CARTO, lon: v.LONGITUDE_CARTO }),
                                    null != y
                                        ? (b.data.push({ latitude: parseFloat(y.lat.replace(",", ".")), longitude: parseFloat(y.lon.replace(",", ".")) }),
                                          (b.processingStatus = this.processingStatus.READY),
                                          this.addMarkers({ mapObject: e, mapDataIndex: d }))
                                        : ((b.processingStatus = this.processingStatus.LOADING), this.loadMarkersData({ mapObject: e, mapDataIndex: d }));
                            }
                        }
                        this.initializeMapEvents({ mapObject: e, mapDataIndex: d });
                    }
                }
                e.isLoaded = !0;
            }
        }
    }),
    (mapsManagerConstructor.prototype.initializeMapEvents = function (p) {
        var _mapObject = p.mapObject,
            _mapDataIndex = p.mapDataIndex,
            _mapData = _mapObject.mapData[_mapDataIndex];
        if (_mapData.mapDataType == this.mapDataType.ONLINE_ESTIMATE) {
            var _inputAddress = document.getElementById("address");
            if (null != _inputAddress) {
                var _elements = document.getElementsByClassName("form-group required");
                if (_elements.length > 0) {
                    var _this = this,
                        onKeyUpExpr = "",
                        onMouseEnterExpr = "",
                        onMouseLeaveExpr = "";
                    (onKeyUpExpr = "_this.sendRequestToGeolocationApi({ mapObject: _mapObject, mapDataIndex: " + _mapDataIndex.toString() + ", address: $('#address').val().trim(), business: '4' });"),
                        (onKeyUpExpr = "_elements[0].addEventListener('keyup', function(e){" + onKeyUpExpr + "}, false)"),
                        eval(onKeyUpExpr);
                    var _as = document.getElementById("addressSuggestions");
                    null != _as &&
                        ((onMouseEnterExpr = "var _as = document.getElementById('addressSuggestions'); "),
                        (onMouseEnterExpr += "if (_as.style.display == 'none' || _as.style.visibility == 'hidden') { "),
                        (onMouseEnterExpr += "_as.style.cssText += 'display: inline; visibility: visible;'; "),
                        (onMouseEnterExpr += "} "),
                        (onMouseEnterExpr = "_elements[0].addEventListener('mouseenter', function(e){" + onMouseEnterExpr + "}, false)"),
                        eval(onMouseEnterExpr),
                        (_elements[0].onmouseleave = function () {
                            document.getElementById("addressSuggestions").style.cssText += "display: none; visibility: hidden;";
                        }));

                        
                }
            }
        }
    }),
    (mapsManagerConstructor.prototype.loadMarkersData = function (t) {
        var e = t.mapObject,
            a = t.mapDataIndex,
            o = e.mapData[a];
        if (o.mapDataType == this.mapDataType.ADMINISTRATIVE_DIVISION) {
            var i = !0,
                s = this.mapDataList.administrative_division;
            if ("" != window.location.search)
                null != (v = this.getCoordinatesFromUrl()) &&
                    ((i = !1),
                    s.data.push({ latitude: v.latitude, longitude: v.longitude, zoomLevel: 14 }),
                    (s.processingStatus = this.processingStatus.READY),
                    o.data.events && o.data.events.enableDataLoad && o.data.events.onDataLoad(e, s.data),
                    this.addMarkers({ mapObject: e, mapDataIndex: a }));
            if (i) {
                var r = this,
                    n = "",
                    l = o.division;
                "" != l.city.label && (l.city.zoomLevel, (n = l.city.label + "&type=municipality")),
                    "" == n && "" != l.department.label && (l.department.zoomLevel, (n = l.department.label)),
                    "" == n && "" != l.region.label && (l.region.zoomLevel, (n = l.region.label)),
                    "" == n && "" != l.country.label && (l.country.zoomLevel, (n = l.country.label)),
                    n.length > 2 && this.sendRequestToGeolocationApi({ mapObject: e, mapDataIndex: a, address: n.trim(), business: "3" });
            }
        }
        if (o.mapDataType == this.mapDataType.AGENCIES) {
            var p = this.outputDebug.data ? o.mapDataType : null,
                m = ((r = this), !1);
            this.outputDebug.data && console.log(p + " data : Loading has begun..."),
                $.ajax({
                    type: "GET",
                    url: o.data.url ? o.data.url : this.mapDataList.agencies.url,
                    cache: !1,
                    contentType: "text/plain",
                    dataType: "text",
                    complete: function () {
                        r.outputDebug.data && console.log("complete");
                    },
                    error: function (t, e, a) {
                        r.outputDebug.data && console.log("error");
                    },
                    success: function (t) {
                        if ((r.outputDebug.data && (console.log(p + " RAW data :"), console.log(t)), t.toString().length > 0)) {
                            var i = jQuery.parseJSON(t);
                            if ((r.outputDebug.data && (console.log(p + " JSON data :"), console.log(i)), i.success)) {
                                var s = null,
                                    n = r.mapDataList.agencies;
                                for (j = 0; j < i.list.length; j++)
                                    (s = i.list[j]),
                                        n.data.push({
                                            idPublication: parseInt(s.idp, 10),
                                            latitude: parseFloat(s.lat.replace(",", ".")),
                                            longitude: parseFloat(s.lon.replace(",", ".")),
                                            cp: s.cp ? s.cp : "",
                                            city: s.v ? s.v : "",
                                            name: s.nom,
                                            url: s.url,
                                        });
                                r.updateAgenciesData(),
                                    (n.processingStatus = r.processingStatus.READY),
                                    (m = !0),
                                    o.data.events && o.data.events.enableDataLoad && o.data.events.onDataLoad(e, n.data),
                                    r.outputDebug.data && (console.log(p + ' data pushed into "this.mapDataList" object :'), console.log(n)),
                                    m && r.addMarkers({ mapObject: e, mapDataIndex: a });
                            }
                        }
                    },
                });
        }
        if (o.mapDataType == this.mapDataType.REALESTATES) {
            document.getElementById("polygon") && $("#polygon").val("");
            var d = id3xContent.macro.E.CARTO_ANNONCES_INIT,
                u = "",
                c = "",
                g = "",
                h = "",
                b = document.getElementById(e.container.id);
            "" != d.LATITUDEMAX && (u = d.LATITUDEMAX.replace(",", ".")),
                "" != d.LATITUDEMIN && (c = d.LATITUDEMIN.replace(",", ".")),
                "" != d.LONGITUDEMAX && (g = d.LONGITUDEMAX.replace(",", ".")),
                "" != d.LONGITUDEMIN && (h = d.LONGITUDEMIN.replace(",", "."));
            var y = this.getQueryForEngine({ elementId: o.transactionTypeSelectorId });
            (n = "height=" + b.offsetHeight + "&width=" + b.offsetWidth + "&latMin=" + c + "&lonMin=" + h + "&latMax=" + u + "&lonMax=" + g + "&" + y), (r = this), (m = !1);
            $.ajax({
                type: "GET",
                url: 1 == o.pinVille ? "/moteur,incl_pin_ville.htm" : "/moteur,incl_pin.htm",
                cache: "true",
                dataType: "json",
                contentType: "application/json",
                data: n,
                beforeSend: function () {
                    document.getElementById("map-layer") && $("#map-layer").show();
                },
                success: function (t) {
                    if ((document.getElementById("polygon") && $("#polygon").val(""), document.getElementById("map-layer") && $("#map-layer").hide(), null != t)) {
                        var i = void 0 !== t.list ? t.list : [];
                        if (i.length > 0) {
                            var s = r.mapDataList.realEstates;
                            s.data.length > 0 && (r.mapDataList.realEstates.data = []), $(".saisie-suggest").val("");
                            var n = $("#phrase-query").val(),
                                l = r.getQueryForEngine({ elementId: o.transactionTypeSelectorId });
                            $(".saisie-suggest").val($(".saisie-suggest").attr("data-value"));
                            var d = !1,
                                u = "";
                            for (j = 0; j < i.length; j++)
                                (d = !1),
                                    (u = ""),
                                    "reg" == i[j].type && 0 != i[j].region
                                        ? ((u = l + "&div=" + i[j].region), (d = !0))
                                        : "dep" == i[j].type && 0 != i[j].departement
                                        ? ((u = l + "&cp=" + i[j].departement), (d = !0))
                                        : "vil" == i[j].type && 0 != i[j].ci
                                        ? ((u = l + "&ci=" + i[j].ci), (d = !0))
                                        : "qrt" == i[j].type && 0 != i[j].idquartier && ((u = l + "&ci=" + i[j].ci + "&idq=" + i[j].idquartier), (d = !0)),
                                    s.data.push({
                                        ci: i[j].ci,
                                        dep: i[j].departement,
                                        idq: i[j].idquartier,
                                        latitude: parseFloat(i[j].latitude),
                                        longitude: parseFloat(i[j].longitude),
                                        nb: i[j].nb,
                                        nom: i[j].nom,
                                        reg: i[j].region,
                                        typ: i[j].type,
                                        vnb: i[j].valuenb,
                                        addPopup: d,
                                        query: u,
                                        titleQuery: d ? n : "",
                                    });
                            (s.processingStatus = r.processingStatus.READY),
                                (m = !0),
                                o.data.events && o.data.events.enableDataLoad && o.data.events.onDataLoad(e, s.data),
                                r.outputDebug.data && (console.log(p + ' data pushed into "_this.mapDataList" object :'), console.log(s)),
                                m && r.addMarkers({ mapObject: e, mapDataIndex: a });
                        }
                    }
                },
                error: function (t, e, a) {
                    r.outputDebug.data && (console.log(t), console.log(e), console.log(a));
                },
                complete: function (t, e) {
                    r.outputDebug.data && (console.log(t), console.log(e));
                },
            });
        }
        if (o.mapDataType == this.mapDataType.SINGLE_REALESTATE) {
            var v,
                E = this.mapDataList.singleRealEstate,
                f = ((i = !0), id3xContent.macro.E.ANNONCE.VILLE.trim());
            if (f.length <= 2)
                null != (v = this.getCoordinatesFromUrl()) &&
                    ((i = !1), E.data.push(v), (E.processingStatus = this.processingStatus.READY), o.data.events && o.data.events.enableDataLoad && o.data.events.onDataLoad(e, E.data), this.addMarkers({ mapObject: e, mapDataIndex: a }));
            i && f.length > 2 && this.sendRequestToGeolocationApi({ mapObject: e, mapDataIndex: a, address: f, business: "2" });
        }
    }),
    (mapsManagerConstructor.prototype.getMarkerIcon = function (t) {
        var e = t.mapObject,
            a = t.markerIcon,
            o = null;
        if ((e.mapLibrary, this.mapLibraries.BINGMAP.genericName, e.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var i = a.defaultIcon;
            o = L.icon({ iconUrl: i.url + i.pictureName, iconSize: [i.size.width, i.size.height], shadowSize: [12, 16], iconAnchor: [i.size.width / 2, i.size.height], popupAnchor: [0, -1 * i.size.height] });
        }
        return o;
    }),
    (mapsManagerConstructor.prototype.setMarkerPopup = function (t) {
        var e = t.mapObject,
            a = t.marker,
            o = t.markerData;
        e.mapLibrary,
            this.mapLibraries.BINGMAP.genericName,
            e.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName && (a.bindPopup("<div>" + id3xContent.texts.clicMore + "</div><div><b>" + o.name + "</b></div>"), (a._popup.options.closeButton = !1));
    }),
    (mapsManagerConstructor.prototype.setMarkerHtml = function (t) {
        var e = t.mapObject,
            a = t.marker,
            o = t.markerData;
        if ((e.mapLibrary, this.mapLibraries.BINGMAP.genericName, e.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var i = e.options;
            a.HTML =
                '<div class="bg-white typo-black small font-body height-75 width-200 round-5 padding-10">' +
                (i.pageEstimation ? id3xContent.texts.clicEstimation : i.pageAcquerir ? id3xContent.texts.clicAcquerir : id3xContent.texts.clicMore) +
                "<strong>" +
                o.name +
                "</strong></div>";
        }
    }),
    (mapsManagerConstructor.prototype.setMarkerEvents = function (p) {
        var _mapObject = p.mapObject,
            _mapData = p.mapData,
            _marker = p.marker,
            _markerData = p.markerData;
        if ((_mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, _mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var _this = this,
                eventExpr = "";
            if (null === _mapData.marker.events) {
                var _options = _mapObject.options;
                if (_options.listing)
                    if (_options.pageEstimation || _options.pageAcquerir) {
                        var _urlRredirect = _options.pageEstimation ? "/estimation,immobiliere.htm" : _options.pageAcquerir ? "/acquereur,demande.htm" : "";
                        eventExpr = "_marker.on('click', function(e) { window.location.href = '/" + _markerData.idPublication + _urlRredirect + "'; })";
                    } else {
                        var _classCSS = "zone-agence-ajax",
                            _domElement = _mapObject.container.domElement.getElementsByClassName(_classCSS);
                        void 0 !== _domElement && null != _domElement && _domElement.length > 0
                            ? ((eventExpr = "mapObject: _mapObject"),
                              (eventExpr = ", marker: _marker"),
                              (eventExpr += ", idPublication:" + _markerData.idPublication.toString()),
                              (eventExpr += ", latitude:" + _markerData.latitude.toString()),
                              (eventExpr += ", longitude:" + _markerData.longitude.toString()),
                              (eventExpr += ", url:'" + _markerData.url + "'"),
                              (eventExpr = "_marker.on('click', function(e) { _this.showMarkerInfo({ " + eventExpr + " }); })"))
                            : (eventExpr = "_marker.on('click', function(e) { window.location.href = '" + _markerData.url + "'; })");
                    }
                else eventExpr = "_marker.on('click', function(e) { window.location.href = '" + _markerData.url + "'; })";
                eval(eventExpr);
            } else
                _mapData.marker.events.enableMarkerClick &&
                    ((_marker.idP = _markerData.idPublication.toString()), (_marker.url = _markerData.url), (_marker.lang = this.language), _marker.addEventListener("click", _mapData.marker.events.onMarkerClick, !1));
            null === _mapData.marker.events && _mapData.marker.popup && eval("_marker.on('mouseout', function(e) { this.closePopup(); })"),
                null === _mapData.marker.events && _mapData.marker.popup && eval("_marker.on('mouseover', function(e) { this.openPopup(); })");
        }
    }),
    (mapsManagerConstructor.prototype.showMarkerInfo = function (t) {
        var e = $("." + containerClass);
        t.mapObject.map.setView([t.latitude, t.longitude], 13),
            e.html("").show(),
            $.ajax({
                type: "GET",
                data: "idpublication=" + t.idPublication + "&lang=" + this.language,
                dataType: "html",
                url: "/carto,incl_search_agence.htm",
                beforeSend: function () {
                    e.html('<div class="pagination-centered"><img src="/z/webagency/slagence_X_V5/images/carto/ajax-loader.gif"></div>');
                },
                success: function (t) {
                    e.html(t).show();
                },
                error: function (t, e, a) {
                    console.log(t, e, a);
                },
                complete: function () {
                    var t = e.position();
                    if (void 0 !== t) return $("html, body").animate({ scrollTop: t.top }, 600), !1;
                },
            });
    }),
    (mapsManagerConstructor.prototype.addMarkers = function (p) {
        var _mapObject = p.mapObject,
            _mapDataIndex = p.mapDataIndex;
        if ((_mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, _mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var _defaultOptions = this.mapLibraries.OPENSTREETMAP.defaultOptions,
                _mapData = _mapObject.mapData[_mapDataIndex],
                _mapDataType = _mapData.mapDataType;
            if (_mapObject.markerList.length > 0) for (r = 0; r < _mapObject.markerList.length; r++) _mapObject.map.removeLayer(_mapObject.markerList[r]);
            var rawData = [];
            switch (_mapDataType) {
                case this.mapDataType.ADMINISTRATIVE_DIVISION:
                    rawData = this.mapDataList.administrative_division.data;
                    break;
                case this.mapDataType.AGENCIES:
                    rawData = this.mapDataList.agencies.data;
                    break;
                case this.mapDataType.ONLINE_ESTIMATE:
                    rawData = this.mapDataList.onlineEstimate.data;
                    break;
                case this.mapDataType.REALESTATES:
                    rawData = this.mapDataList.realEstates.data;
                    break;
                case this.mapDataType.SINGLE_REALESTATE:
                    rawData = this.mapDataList.singleRealEstate.data;
            }
            this.outputDebug.marker && this.showOutputDebug({ shortName: "RAW DATA for markers", objectValue: rawData });
            var _data = null,
                _filters = _mapData.filters;
            if (
                (_filters.length > 0
                    ? (this.outputDebug.marker && this.showOutputDebug({ shortName: "Filters", objectValue: _filters }),
                      (_data = this.filterData({ filters: _filters, data: rawData })),
                      this.outputDebug.marker && this.showOutputDebug({ shortName: "Filtered data", objectValue: _data }))
                    : (this.outputDebug.marker && console.log("No filtering."), (_data = rawData)),
                _data.length > 0)
            ) {
                var nRecords = !1,
                    L_marker = null,
                    L_icon = null,
                    _markerIcon = "0",
                    _zoomLevel = 0,
                    _zoomLatitude = 0,
                    _zoomLongitude = 0;
                for (
                    _mapDataType != this.mapDataType.REALESTATES && ((_markerIcon = _mapData.marker.icon), null != _markerIcon && (L_icon = this.getMarkerIcon({ mapObject: _mapObject, markerIcon: _markerIcon }))),
                        _data.length > 1 && (nRecords = !0),
                        this.outputDebug.marker && console.log("~> List of markers :"),
                        g = 0;
                    g < _data.length;
                    g++
                ) {
                    if (((_zoomLatitude += _data[g].latitude), (_zoomLongitude += _data[g].longitude), _mapDataType != this.mapDataType.REALESTATES))
                        (L_marker = null != L_icon ? new L.marker([_data[g].latitude, _data[g].longitude], { icon: L_icon }) : new L.marker([_data[g].latitude, _data[g].longitude])),
                            _mapDataType === this.mapDataType.ONLINE_ESTIMATE &&
                                (L_marker.bindPopup("<div>" + _data[g].label + "</div><div><b>" + _data[g].context + "</b></div>"),
                                (L_marker._popup.options.closeButton = !1),
                                eval("L_marker.on('mouseout', function(e) { this.closePopup(); })"),
                                eval("L_marker.on('mouseover', function(e) { this.openPopup(); })")),
                            nRecords &&
                                (this.setMarkerHtml({ mapObject: _mapObject, marker: L_marker, markerData: _data[g] }),
                                _mapData.marker.popup && this.setMarkerPopup({ mapObject: _mapObject, marker: L_marker, markerData: _data[g] }),
                                this.setMarkerEvents({ mapObject: _mapObject, mapData: _mapData, marker: L_marker, markerData: _data[g] }));
                    else if (
                        ((L_icon = new L.DivIcon({
                            className: "div.leaflet-marker-icon.leaflet-zoom-animated.leaflet-interactive",
                            html: '<div class="btn btn-action btn-small small font-body box-shadow" style="border-radius:4px;">' + _data[g].vnb + "</div>",
                        })),
                        (L_marker = new L.marker([_data[g].latitude, _data[g].longitude], { icon: L_icon })),
                        _data[g].addPopup)
                    ) {
                        var _engineLink = _data[g].nom;
                        _data[g].titleQuery && (_engineLink += '<br><a href="/recherche,basic.htm?' + _data[g].query + '" title="' + _data[g].titleQuery + '">' + _data[g].titleQuery + "</a>"),
                            L_marker.bindPopup('<div class="z50 pinQuartier typo-black font-body height-100-pourcent width-100-pourcent round-5 normal padding-10 ellipsis relative pagination-centered bg-white">' + _engineLink + "</div>");
                    }
                    this.outputDebug.marker && console.log(L_marker), _mapObject.markerList.push(L_marker);
                }
                this.outputDebug.marker && console.log("~> End of list (markers)."),
                    nRecords &&
                        (this.outputDebug.marker &&
                            (console.log("~> Map view coordinates (correction) : algorithm"),
                            console.log("   _zoomLatitude = _zoomLatitude / _data.length; _zoomLongitude = _zoomLongitude / _data.length;"),
                            console.log("   _zoomLatitude = " + _zoomLatitude.toString() + " / " + _data.length.toString() + "; _zoomLongitude = " + _zoomLongitude.toString() + " / " + _data.length.toString() + ";")),
                        (_zoomLatitude /= _data.length),
                        (_zoomLongitude /= _data.length),
                        this.outputDebug.marker && console.log("   _zoomLatitude = " + _zoomLatitude.toString() + "; _zoomLongitude = " + _zoomLongitude.toString() + ";")),
                    (_zoomLevel = void 0 === _data[0].zoomLevel ? _defaultOptions.zoomLevel : _data[0].zoomLevel),
                    this.outputDebug.marker &&
                        (console.log("~> Map zoom level : " + _zoomLevel.toString()),
                        console.log(
                            "   _zoomLevel = (_data[0].zoomLevel === undefined) ? _defaultOptions.zoomLevel (= " +
                                (void 0 === _defaultOptions.zoomLevel ? "undefined" : _defaultOptions.zoomLevel.toString()) +
                                ") : _data[0].zoomLevel (= " +
                                (void 0 === _data[0].zoomLevel ? "undefined" : _data[0].zoomLevel.toString()) +
                                ");"
                        )),
                    _mapObject.map.setView([_zoomLatitude, _zoomLongitude], _zoomLevel);
                var marker = null;
                for (g = 0; g < _mapObject.markerList.length; g++) (marker = _mapObject.markerList[g]), marker.addTo(_mapObject.map), null === _markerIcon && _mapObject.map.removeLayer(marker);
                nRecords && this.fitMap({ mapObject: _mapObject });
                var _this = this,
                    onClickExpr = "",
                    zoomStart = _mapObject.container.domElement.getElementsByClassName("leaflet-control-zoom-to-start");
                void 0 !== zoomStart &&
                    null != zoomStart &&
                    zoomStart.length > 0 &&
                    ((onClickExpr = "_mapObject.map.setView([" + _zoomLatitude + ", " + _zoomLongitude + "], " + _zoomLevel + "); "),
                    (onClickExpr += "_this.fitMap({ mapObject: _mapObject }); "),
                    (onClickExpr = "zoomStart[0].onclick = function(e){ " + onClickExpr + "};"),
                    eval(onClickExpr));
            } else {
                var _mapCenter = _mapObject.map.getCenter();
                if (null != _mapCenter) {
                    var _translation = "" != this.language ? eval("this.translations." + this.language) : this.translations.en,
                        _textTooltip = void 0 !== _translation ? _translation.noCoordinates : this.translations.en.noCoordinates;
                    new L.marker([_mapCenter.lat, _mapCenter.lng], { opacity: 0.01 }).bindTooltip(_textTooltip, { direction: "top", permanent: !0, offset: [0, 0], opacity: 0.6 }).addTo(_mapObject.map);
                }
            }
        }
    }),
    (mapsManagerConstructor.prototype.newGeolocationSearch = function (t) {
        $(".erreur-saisie-geo").hide();
        var e = $("#" + t.mapObject.options.autoCompleteFeature.inputContainerId).val();
        e.length > 2 && (e.toLowerCase().match(/^(ain|finistere|somme|nord)$/) && (e += " FRANCE"), this.sendRequestToGeolocationApi({ mapObject: t.mapObject, address: e.trim(), business: "1" }));
    }),
    (mapsManagerConstructor.prototype.sendRequestToGeolocationApi = function (t) {
        this.outputDebug.api && this.showOutputDebug({ shortName: "sendRequestToGeolocationApi()", objectValue: t });
        var e = t.address;
        if (e.length > 2) {
            var a = this,
                o = this.api.geolocation.url,
                i = "q=" + e,
                s = null;
            null == s && void 0 !== t.postCode && null != t.postCode && (s = "&type=housenumber&postcode=" + t.postCode.toString()),
                null == s && void 0 !== t.searchType && null != t.searchType && (s = "&type=" + t.searchType.toString()),
                null != s && (i += s),
                a.outputDebug.api && console.log("\r\nAPI call : " + o + i),
                $.ajax({
                    type: "GET",
                    data: i,
                    dataType: "json",
                    url: o,
                    beforeSend: function () {},
                    success: function (e) {
                        if ((a.outputDebug.api && (console.log("\r\nAPI : ajax success :"), console.log(e)), null != e && null != e.features))
                            if (t.business.match(/^(1|2|3)$/)) {
                                var o = Array.isArray(e.features) && e.features.length > 0 ? e.features[0] : null;
                                if (o && null != o.geometry) {
                                    var i = null != o.geometry.coordinates ? o.geometry.coordinates : null;
                                    if (null != i)
                                        switch (t.business) {
                                            case "1":
                                                t.mapObject.map.setView([i[1], i[0]], 14);
                                                break;
                                            case "2":
                                                var s = a.mapDataList.singleRealEstate;
                                                s.data.push({ latitude: i[1], longitude: i[0] }), (s.processingStatus = a.processingStatus.READY), a.addMarkers({ mapObject: t.mapObject, mapDataIndex: t.mapDataIndex });
                                                break;
                                            case "3":
                                                var r = a.mapDataList.administrative_division;
                                                r.data.push({ latitude: i[1], longitude: i[0], zoomLevel: 14 }), (r.processingStatus = a.processingStatus.READY), a.addMarkers({ mapObject: t.mapObject, mapDataIndex: t.mapDataIndex });
                                        }
                                }
                            } else {
                                a.mapDataList.onlineEstimate.itemsList = e.features;
                                var n = a.get_onlineEstimate_DomList();
                                if (null != n && null != n) {
                                    for (; n.firstChild; ) n.removeChild(n.firstChild);
                                    a.initialize_onlineEstimate_DomList({ mapObject: t.mapObject, mapDataIndex: t.mapDataIndex, ulElement: n, data: e.features });
                                    var l = document.getElementById("addressSuggestions");
                                    ("none" != l.style.display && "hidden" != l.style.visibility) || (l.style.cssText += "display: inline; visibility: visible;");
                                    if(document.getElementById("addressSuggestionsList")!=null) {
                                        if(document.getElementById("addressSuggestionsList").children.length==0){
                                            document.querySelector("div[id=addressSuggestions]").style = "display: none; visibility: hidden;";
            
                                        }
                                    }
                                }
                            }
                    },
                    error: function (t, e, a) {
                        console.log(t, e, a);
                    },
                    complete: function () {},
                });
        }
    }),
    (mapsManagerConstructor.prototype.get_onlineEstimate_DomList = function () {
        if (null == (l = document.getElementById("addressSuggestionsList")) || null == l) {
            var t = document.getElementById("addressSuggestions");
            for (t.style.cssText += "position: absolute; z-index: 1500; width: 100%;"; t.firstChild; ) t.removeChild(t.firstChild);
            t.onmouseleave = function () {
                this.style.cssText += "display: none; visibility: hidden;";
            };
            var e = document.createElement("div"),
                a = document.createElement("div"),
                o = document.createElement("div"),
                i = document.createElement("div"),
                s = document.createElement("div"),
                r = document.createElement("div"),
                n = document.createElement("p"),
                l = document.createElement("ul");
            (e.className = "MicrosoftMap"),
                (a.className = "MicrosoftMap"),
                (o.id = "as_container"),
                (o.className = "as_container_search as_container"),
                o.setAttribute("data-tag", "as_container"),
                (i.className = "asOuterContainer"),
                (s.className = "clear"),
                (r.style.cssText += "display: none;"),
                (n.className = "nearBySearchText b_secondaryText"),
                (l.id = "addressSuggestionsList"),
                r.appendChild(n),
                i.appendChild(r),
                i.appendChild(l),
                o.appendChild(i),
                o.appendChild(s),
                a.appendChild(o),
                t.appendChild(e),
                t.appendChild(a),
                (l = document.getElementById("addressSuggestionsList"));
        }
        return l;
    }),
    (mapsManagerConstructor.prototype.initialize_onlineEstimate_DomList = function (p) {
        for (var liItem = null, divItem = null, tableItem = null, trItem1 = null, tdItem1 = null, trItem2 = null, tdItem2 = null, q = 0; q < p.data.length; q++)
            (liItem = document.createElement("li")),
                (divItem = document.createElement("div")),
                (tableItem = document.createElement("table")),
                (trItem1 = document.createElement("tr")),
                (tdItem1 = document.createElement("td")),
                (trItem2 = document.createElement("tr")),
                (tdItem2 = document.createElement("td")),
                (divItem.style.cssText += "margin-top: 5px; margin-left: 20px;"),
                (tableItem.style.cssText += "width: 96%;"),
                (tdItem1.style.cssText += "cursor: pointer; color: #170000; width: 100%;"),
                q > 0 && (tdItem1.style.cssText += "border-top: 1px solid #E3E3E3; padding-top: 5px;"),
                (tdItem1.innerHTML = p.data[q].properties.label),
                eval("tdItem1.onclick = function () { id3xContent.geolocation.manager.update_onlineEstimate_geoMap({mapObject: p.mapObject, mapDataIndex: " + p.mapDataIndex.toString() + ", part:0, index:" + q.toString() + "}); };"),
                (tdItem2.style.cssText += "cursor: pointer; color: #170000; width: 100%;"),
                (tdItem2.innerHTML = p.data[q].properties.context),
                eval("tdItem2.onclick = function () { id3xContent.geolocation.manager.update_onlineEstimate_geoMap({mapObject: p.mapObject, mapDataIndex: " + p.mapDataIndex.toString() + ", part:1, index:" + q.toString() + "}); };"),
                trItem1.appendChild(tdItem1),
                trItem2.appendChild(tdItem2),
                tableItem.appendChild(trItem1),
                tableItem.appendChild(trItem2),
                divItem.appendChild(tableItem),
                liItem.appendChild(divItem),
                p.ulElement.appendChild(liItem);
    }),
    (mapsManagerConstructor.prototype.update_onlineEstimate_geoMap = function (t) {
        document.getElementById("addressSuggestions").style.cssText += "display: none; visibility: hidden;";
        var e = this.mapDataList.onlineEstimate,
            a = e.itemsList[t.index];
        if (null != a && null != a) {
            var o = a.geometry.coordinates;
            (coordinatesEstate.latitude = parseFloat(o[1])), (coordinatesEstate.longitude = parseFloat(o[0]));
            var i = a.properties;
            (coordinatesEstate.postalCode = i.postcode),
                (coordinatesEstate.city = i.city),
                (coordinatesEstate.address = i.city + ", " + i.housenumber + " " + i.street),
                (coordinatesEstate.addressWithoutCountry = i.label.replace("France", ""));
            var s = document.getElementById("address");
            null != s && null != s && (0 == t.part && (s.value = i.label), 1 == t.part && (s.value = i.context)),
                (e.data = [{ address: "", addressWithoutCountry: "", city: "", context: i.context, label: i.label, latitude: coordinatesEstate.latitude, longitude: coordinatesEstate.longitude, postalCode: "", zoomLevel: 12 }]),
                this.addMarkers({ mapObject: t.mapObject, mapDataIndex: t.mapDataIndex });
        }
    }),
    (mapsManagerConstructor.prototype.initializeAutoComplete = function (t) {
        var e = t.mapObject,
            a = e.options.autoCompleteFeature,
            o = a.inputContainerId;
        if (a.enabled && "" != o && document.getElementById(o) && (t.mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, t.mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var i = this;
            $("#" + o).easyAutocomplete({
                ajaxSettings: { dataType: "json" },
                getValue: function (t) {
                    return t.properties.label + " | " + t.properties.context;
                },
                listLocation: function (t) {
                    return t.features;
                },
                requestDelay: 300,
                url: function (t) {
                    var e = t.trim();
                    return e.length > 1 ? (e.split(" ").length - 1 == 0 && "fr" == i.language && e.toLowerCase().match(/^(ain|finistere|somme|nord)$/) && (e += " FRANCE"), i.api.geolocation.url + "q=" + encodeURI(e)) : "";
                },
                list: {
                    onClickEvent: function () {
                        var t = $("#" + o).getSelectedItemData();
                        if (void 0 !== t && null != t && null != t.geometry) {
                            var i = null != t.geometry.coordinates ? t.geometry.coordinates : null;
                            null != i && (null != a.autoCompleteMarker && e.map.removeLayer(a.autoCompleteMarker), (a.autoCompleteMarker = new L.marker([i[1], i[0]], {}).addTo(e.map)), e.map.setView([i[1], i[0]], 9));
                        }
                    },
                },
            }),
                $(document).ready(function () {
                    document.getElementById("bouton-search-user") &&
                        $("#bouton-search-user").click(function (t) {
                            t.preventDefault(), i.newGeolocationSearch({ mapObject: e });
                        }),
                        document.getElementById(o) &&
                            $("#" + o).keydown(function (t) {
                                13 == t.keyCode && i.newGeolocationSearch({ mapObject: e });
                            });
                });
        }
    }),
    (mapsManagerConstructor.prototype.getCoordinatesFromUrl = function () {
        var t = null,
            e = window.location.search;
        if (null != e) {
            var a = e.replace("?", "").split("&");
            if (a.length > 0) {
                for (var o = null, i = { lat: null, lon: null }, s = 0; s < a.length; s++) "ville" == (o = a[s].split("="))[0] ? (place = o[1].replace("-", "+")) : ("lat" == o[0] && (i.lat = o[1]), "lon" == o[0] && (i.lon = o[1]));
                null != i.lat && null != i.lon && (t = { latitude: parseFloat(i.lat), longitude: parseFloat(i.lon) });
            }
        }
        return t;
    }),
    (mapsManagerConstructor.prototype.getQueryForEngine = function (t) {
        var e = "";
        return (
            (e = $("#" + t.elementId).length
                ? $("#" + t.elementId)
                      .filter(function () {
                          return $(this).val();
                      })
                      .serialize()
                : querypreliste),
            this.outputDebug.data && console.log("getQueryForEngine() = '" + e + "'"),
            e
        );
    }),
    (mapsManagerConstructor.prototype.updateFilters = function (t) {
        for (var e = t.mapObject, a = t.mapDataIndex, o = t.newFilter, i = e.mapData[a].filters, s = 0, r = !1; !r && s < i.length; )
            i[s].key == o.key && ("" === o.value ? i[s].splice(s, 1) : ((i[s].action = o.action), (i[s].value = o.value)), (r = !0)), s++;
        r || "" == o.value || i.push({ action: o.action, key: o.key, value: o.value }), this.addMarkers({ mapObject: t.mapObject, mapDataIndex: t.mapDataIndex });
    }),
    (mapsManagerConstructor.prototype.filterData = function (p) {
        for (var _filters = p.filters, _data = p.data, results = [], f = 0, toNextFilter = !0, filtered = !1, _valueData = null; toNextFilter && f < _filters.length; ) {
            switch (_filters[f].action) {
                case "exclude":
                    results = _data;
                    break;
                case "single":
                    for (h = 0; h < _data.length; h++)
                        if (((_valueData = eval("_data[h]." + _filters[f].key)), void 0 !== _valueData && (filtered || (_filters[f].value === _valueData.toString() && (filtered = !0)), filtered))) {
                            results.push(_data[h]);
                            break;
                        }
                    toNextFilter = !1;
                    break;
                case "":
                    for (h = 0; h < _data.length; h++) (_valueData = eval("_data[h]." + _filters[f].key)), _valueData == _filters[f].value && results.push(_data[h]);
                    break;
                default:
                    results = _data;
            }
            f++;
        }
        return results;
    }),
    (mapsManagerConstructor.prototype.fixCssMap = function (t) {
        if ((t.mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, t.mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName) && t.mapObject.options.fixes.zIndexFix) {
            for (
                var e = new Array(),
                    a = [
                        "leaflet-pane leaflet-map-pane",
                        "leaflet-top leaflet-left",
                        "leaflet-top leaflet-right",
                        "leaflet-bottom leaflet-left",
                        "leaflet-bottom leaflet-right",
                        "leaflet-control-zoom leaflet-bar leaflet-control",
                        "leaflet-control-scale leaflet-control",
                        "leaflet-control-attribution leaflet-control",
                    ],
                    o = 0;
                o < a.length;
                o++
            )
                e.push(t.mapObject.container.domElement.getElementsByClassName(a[o]));
            for (o = 0; o < e.length; o++) void 0 !== e[o] && null != e[o] && e[o].length > 0 && (e[o][0].style.zIndex = "auto");
        }
    }),
    (mapsManagerConstructor.prototype.fixCssToolbar = function (t) {
        t.enableFix && void 0 !== t.domElement && (t.domElement.style.cssText += "background-color: #FFF; text-decoration: none; color: black; font-size: 22px !important;");
    }),
    (mapsManagerConstructor.prototype.fitMap = function (t) {
        if ((t.mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, t.mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName)) {
            var e = t.mapObject.markerList;
            if (e.length > 1) {
                var a = new L.featureGroup(e);
                t.mapObject.map.fitBounds(a.getBounds());
            }
        }
    }),
    (mapsManagerConstructor.prototype.setCurrentPosition = function (p) {
        var HTMLcontrol = p.domElement,
            _map = p.mapObject.map,
            _options = p.mapObject.options.toolBar;
        if ((p.mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, p.mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName && HTMLcontrol)) {
            HTMLcontrol.setAttribute("title", _options.buttons.zoomArea.titleAccuracy.replace("{0}", this.deviceGeolocation.accuracy));
            var currentPositionExpr = "[" + this.deviceGeolocation.latitude.toString() + "," + this.deviceGeolocation.longitude.toString() + "]";
            (currentPositionExpr = "_map.setView(" + currentPositionExpr + ", " + _options.buttons.zoomArea.zoomLevel.toString() + " );"),
                eval(currentPositionExpr),
                (currentPositionExpr = "HTMLcontrol.onclick = function(e) {" + currentPositionExpr + "}"),
                eval(currentPositionExpr);
        }
    }),
    (mapsManagerConstructor.prototype.getCurrentPosition = function (t) {
        if (this.deviceGeolocation.allowed) this.setCurrentPosition({ mapObject: t.mapObject, domElement: t.domElement });
        else {
            var e = this;
            navigator.geolocation.getCurrentPosition(
                function (a) {
                    var o = a.coords;
                    (e.deviceGeolocation.accuracy = o.accuracy.toString()),
                        (e.deviceGeolocation.allowed = !0),
                        (e.deviceGeolocation.latitude = o.latitude),
                        (e.deviceGeolocation.longitude = o.longitude),
                        e.setCurrentPosition({ mapObject: t.mapObject, domElement: t.domElement });
                },
                function (e) {
                    t.domElement && (t.domElement.style.cssText += "display: none; visibility: hidden;");
                },
                { enableHighAccuracy: !0, timeout: 5e3, maximumAge: 0 }
            );
        }
    }),
    (mapsManagerConstructor.prototype.loadMapToolBar = function (t) {
        if (
            (this.outputDebug.map && (console.log("\r\nloadMapToolBar(p); object in parameter 'p' is :"), console.log(t.mapObject)),
            t.mapObject.readyToLoad && (t.mapObject.mapLibrary, this.mapLibraries.BINGMAP.genericName, t.mapObject.mapLibrary == this.mapLibraries.OPENSTREETMAP.genericName))
        ) {
            var e = t.mapObject.options.toolBar;
            new L.Control.ZoomBar({ position: e.position }).addTo(t.mapObject.map);
            var a = t.mapObject.container.domElement.getElementsByClassName("leaflet-control-zoom-to-start"),
                o = t.mapObject.container.domElement.getElementsByClassName("leaflet-control-zoom-to-area"),
                i = t.mapObject.container.domElement.getElementsByClassName("leaflet-control-zoom-in"),
                s = t.mapObject.container.domElement.getElementsByClassName("leaflet-control-zoom-out");
            if (
                (void 0 !== i && null != i && i.length > 0 && (e.fixCssToolbar && this.fixCssToolbar({ enableFix: e.fixCssToolbar, domElement: i[0] }), i[0].setAttribute("title", e.buttons.zoomIn.title)),
                void 0 !== s && null != s && s.length > 0 && (e.fixCssToolbar && this.fixCssToolbar({ enableFix: e.fixCssToolbar, domElement: s[0] }), s[0].setAttribute("title", e.buttons.zoomOut.title)),
                void 0 !== a && null != a && a.length > 0)
            ) {
                e.fixCssToolbar && this.fixCssToolbar({ enableFix: e.fixCssToolbar, domElement: a[0] }), a[0].setAttribute("title", e.buttons.zoomStart.title);
                var r = this;
                a[0].onclick = function (e) {
                    r.fitMap({ mapObject: t.mapObject });
                };
            }
            if (void 0 !== o && null != o && o.length > 0)
                if (this.httpsContext && e.buttons.zoomArea.enableGeolocation) {
                    e.fixCssToolbar && this.fixCssToolbar({ enableFix: e.fixCssToolbar, domElement: o[0] }), o[0].setAttribute("title", e.buttons.zoomArea.title);
                    r = this;
                    o[0].onclick = function (e) {
                        r.getCurrentPosition({ mapObject: t.mapObject, domElement: o[0] });
                    };
                } else (o[0].style.visibility = "hidden"), (o[0].style.display = "none");
        }
    }),
    (mapsManagerConstructor.prototype.setPropertyValue = function (t, e) {
        return void 0 === e ? t : e || t;
    }),
    (mapsManagerConstructor.prototype.showOutputDebug = function (t) {
        var e = void 0 !== t.shortName ? t.shortName : "<shortName is undefined>",
            a = void 0 !== t.stringValue ? t.stringValue : "",
            o = void 0 !== t.objectValue ? t.objectValue : "<objectValue is undefined>";
        void 0 !== t.objectValue ? (console.log('~> object "' + e + (a.length > 0 ? '" with value : "' + a + '"' : '"')), console.log(o), console.log('   END "' + e + '".')) : console.log("~> " + e + " : " + a);
    });
